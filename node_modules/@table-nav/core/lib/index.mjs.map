{"version":3,"sources":["../src/selectors.ts","../src/index.ts"],"sourcesContent":["export const Selectors = {\n  Cell: '[role=\"cell\"],[role=\"gridcell\"],[role=\"columnheader\"],[role=\"rowheader\"],td,th',\n  Row: '[role=\"row\"],tr',\n  RowGroup: '[role=\"rowgroup\"],thead,tbody,tfoot',\n  /** Selector from here: https://github.com/Shopify/polaris/blob/main/polaris-react/src/utilities/focus.ts#L10 */\n  Focusable:\n    'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled=\"true\"]):not([tabindex=\"-1\"]):not(:disabled),*[tabindex]',\n} as const;\n","import { Keys } from './keys';\nimport { Selectors } from './selectors';\n\ntype FocusableElement = HTMLElement | SVGElement;\n\nexport type Config =\n  | {\n      /** Enable debug logs */\n      debug?: boolean;\n      /** CSS Selectors being used to find Rows, Row Groups, Cells and Focusable elements */\n      selectors?: Partial<typeof Selectors>;\n      /** How many rows to move when pressing page up/down - Default goes to first/last row */\n      pageUpDown?: number;\n    }\n  | undefined;\n\nexport class DataGridNav {\n  private selectors: Record<keyof typeof Selectors, string>;\n  readonly pageUpDown: number | undefined;\n  private keys: string[] = [];\n  private disabled: boolean;\n  readonly debug: boolean;\n\n  constructor();\n  constructor(config: Config);\n  constructor(config: Config = {}) {\n    const { selectors = {}, pageUpDown, debug = false } = config;\n    this.selectors = { ...Selectors, ...selectors };\n    this.pageUpDown = pageUpDown;\n    this.keys = [];\n    this.debug = debug;\n    this.disabled = false;\n  }\n\n  private debugLog = (functionName: string, message: string) => {\n    if (this.debug) console.info(`[${functionName}]: ${message}`);\n  };\n\n  /**\n   * Disables the keyboard listener in cases\n   * that elements inside the grid need to use\n   * arrows keys etc., like select dropdowns\n   */\n  public disable() {\n    this.disabled = true;\n  }\n\n  /**\n   * Enables the keyboard listeners\n   */\n  public enable() {\n    this.disabled = false;\n  }\n\n  private isFocusable(el: Element): el is FocusableElement {\n    return el instanceof HTMLElement || el instanceof SVGElement;\n  }\n\n  /** Used as a keyboard listener for key up */\n  public tableKeyUp() {\n    // TODO: have a cleanup as user can press key\n    //  and then move to another tab, and get back to the same tab\n    // so this will not be empty (the bug exists with .pop)\n    this.keys = [];\n  }\n\n  /** Used as a keyboard listener for key down */\n  public tableKeyDown(e: KeyboardEvent) {\n    this.debugLog('tableKeyDown', `Key pressed: ${e.key}`);\n    if (this.disabled) {\n      this.debugLog('tableKeyDown', 'interaction is disabled');\n      return;\n    }\n    /**\n     * Avoid page scrolling etc.\n     * Enable default behavior for:\n     * Tab, Shift + Tab\n     * TODO: Actually it will be better to just prevent\n     * in ArrowKeys and PageKeys maybe?\n     * Or should the consumer stop propagation?!\n     * Cannot work with preventDefault as it will\n     * first capture the event from an input in cell for example\n     */\n    if (\n      Keys.ArrowDown === e.key ||\n      Keys.ArrowUp === e.key ||\n      Keys.ArrowLeft === e.key ||\n      Keys.ArrowRight === e.key\n    ) {\n      e.preventDefault();\n    }\n\n    /**\n     * Add key to the stack if it's\n     * not the same with the last (long press)\n     */\n    if (this.keys.length === 0 || this.keys[this.keys.length - 1] !== e.key) {\n      this.keys.push(e.key);\n    }\n\n    /**\n     * Need to check if we are inside a grid cell\n     * or not to enable/disable Grid Navigation\n     */\n    if (!(e.target instanceof Element)) return;\n    const cell = e.target.parentElement?.closest(\n      `${this.selectors.Cell},${this.selectors.Row}`\n    );\n\n    if (!cell) {\n      this.debugLog('tableKeyDown', 'cell not found');\n      return;\n    }\n\n    if (cell.matches(this.selectors.Cell)) {\n      this.debugLog('tableKeyDown', 'event captured in cell');\n      this.cellNavigation(e);\n    } else {\n      this.debugLog('tableKeyDown', 'event captured in cell');\n      this.gridNavigation(e);\n    }\n  }\n\n  /**\n   * Handles the navigation inside a cell\n   */\n  public cellNavigation(e: KeyboardEvent) {\n    if (!(e.target instanceof Element)) return;\n\n    /**\n     * Keys: Escape\n     * Restore grid navigation\n     */\n    if (e.key === Keys.Escape) {\n      const cell = e.target.closest(this.selectors.Cell);\n      if (cell && this.isFocusable(cell)) {\n        cell.focus();\n        return;\n      }\n    }\n\n    /**\n     * Keys: ArrowRight, ArrowDown\n     * Move to the next focusable cell, or the first one\n     *\n     * Arrow Down disabled:\n     * https://github.com/w3c/aria-practices/issues/2739#issuecomment-1613538972\n     */\n    if (e.key === Keys.ArrowRight || e.key === Keys.ArrowDown) {\n      const cell = e.target.closest(this.selectors.Cell);\n      if (!cell) {\n        this.debugLog('cellNavigation', 'cell not found');\n        return;\n      }\n\n      const focusableWidgets = [\n        ...cell.querySelectorAll(this.selectors.Focusable),\n      ];\n\n      const widgetIdx = focusableWidgets.findIndex((el) => el === e.target);\n\n      const nextFocusable =\n        widgetIdx === focusableWidgets.length - 1 ? 0 : widgetIdx + 1;\n      const widgetToFocus = focusableWidgets[nextFocusable];\n      if (this.isFocusable(widgetToFocus)) {\n        widgetToFocus.focus();\n      }\n\n      return;\n    }\n\n    /**\n     * Keys: ArrowLeft, ArrowUp\n     * Move to the previous focusable cell, or the last one\n     *\n     * Arrow Up disabled:\n     * https://github.com/w3c/aria-practices/issues/2739#issuecomment-1613538972\n     */\n    if (e.key === Keys.ArrowLeft || e.key === Keys.ArrowUp) {\n      const cell = e.target.closest(this.selectors.Cell);\n\n      if (!cell) {\n        this.debugLog('cellNavigation', 'cell not found');\n        return;\n      }\n\n      const focusableWidgets = [\n        ...cell.querySelectorAll(this.selectors.Focusable),\n      ];\n\n      const widgetIdx = focusableWidgets.findIndex((el) => el === e.target);\n\n      const previousFocusable =\n        widgetIdx === 0 ? focusableWidgets.length - 1 : widgetIdx - 1;\n      const widgetToFocus = focusableWidgets[previousFocusable];\n      if (this.isFocusable(widgetToFocus)) {\n        widgetToFocus.focus();\n      }\n\n      return;\n    }\n  }\n\n  /**\n   * Handles the navigation outside a cell\n   * on the grid level\n   */\n  public gridNavigation(e: KeyboardEvent) {\n    const { target } = e;\n    if (!(e.target instanceof Element)) return;\n    if (!(target instanceof Element)) return;\n\n    if (this.keys.length === 1) {\n      /**\n       * Keys: Enter\n       * Should move focus inside the cell to the first focusable element:\n       * https://www.w3.org/WAI/ARIA/apg/patterns/grid/#gridNav_inside\n       */\n      if (e.key === Keys.Enter) {\n        const cell = e.target.querySelector(this.selectors.Focusable);\n        if (cell && this.isFocusable(cell)) {\n          // Enter can trigger child elements:\n          // Source: https://www.reddit.com/r/learnjavascript/comments/14kpj24/wrong_keydown_listener_is_called_with_focus/\n          // If the e.preventDefault causes issues, we can offset the execution with setTimeout\n          cell.focus();\n          e.preventDefault();\n        }\n      }\n\n      /**\n       * Keys: ArrowLeft, ArrowRight\n       * Should move focus to the next/previous cell\n       */\n      if (e.key === Keys.ArrowLeft || e.key === Keys.ArrowRight) {\n        const direction = e.key === Keys.ArrowLeft ? 'prev' : 'next';\n        // Get the closest cell we are currently in\n        const cell = e.target.closest(this.selectors.Cell);\n\n        if (cell && cell instanceof Element) {\n          const closeFocusable = this.findUntil(\n            direction,\n            cell,\n            this.selectors.Cell\n          );\n          if (closeFocusable) {\n            closeFocusable.focus();\n          }\n        }\n      }\n\n      /**\n       * Keys: Up,Down\n       * Should move focus to the same column of the next/previous row\n       */\n      if (e.key === Keys.ArrowDown || e.key === Keys.ArrowUp) {\n        this.verticalCellNavigation(e);\n        return;\n      }\n\n      /**\n       * Keys: PageUp, PageDown\n       * Should move focus to the first/last row\n       * or a predefined number of rows if user provides a value\n       */\n      if (e.key === Keys.PageUp || e.key === Keys.PageDown) {\n        this.pageCellNavigation(e);\n        return;\n      }\n\n      /**\n       * Keys: Home, End\n       * Should move focus to the first/last cell of the current row\n       */\n      if (e.key === Keys.Home || e.key === Keys.End) {\n        const row = e.target.closest(this.selectors.Row) as Element;\n        const rowChildren = [...(row?.children || [])];\n        if (e.key === 'End') rowChildren.reverse();\n        this.focusOnFirstCell(rowChildren);\n      }\n    } else {\n      /**\n       * Keys: Control + Home, Control + End\n       * Should move focus to the first/last cell of the first/last row\n       */\n      const [firstKey, secondKey] = this.keys;\n      if (\n        firstKey === 'Control' &&\n        (secondKey === Keys.Home || secondKey === Keys.End)\n      ) {\n        const row = e.target.closest(this.selectors.Row) as Element;\n        const siblings = row.parentElement?.children;\n\n        if (!siblings) {\n          this.debugLog('cellNavigation', 'siblings not found');\n          return;\n        }\n\n        const rowToFocus =\n          secondKey === Keys.Home ? siblings[0] : siblings[siblings.length - 1];\n        const rowChildren = [...(rowToFocus?.children || [])];\n        if (secondKey === Keys.End) rowChildren.reverse();\n        this.focusOnFirstCell(rowChildren);\n      }\n    }\n  }\n\n  private pageCellNavigation(e: KeyboardEvent) {\n    if (!(e.target instanceof Element)) return;\n    const row = e.target.closest(this.selectors.Row) as Element;\n    const cell = e.target.closest(this.selectors.Cell) as Element;\n\n    if (row && cell) {\n      const position = this.getColumnIndex(cell);\n\n      if (position === undefined) {\n        this.debugLog('cellNavigation', 'position not found');\n        return;\n      }\n\n      const direction = e.key === Keys.PageUp ? 'prev' : 'next';\n      const siblings = row.parentElement?.children;\n\n      if (!siblings) {\n        this.debugLog('cellNavigation', 'siblings not found');\n        return;\n      }\n\n      // If pageUpDown is defined, we should move that number of rows, or to the closest possible\n      let destinationRow: Element | ChildNode;\n      if (this.pageUpDown) {\n        const methodClbk =\n          direction === 'prev' ? 'previousSibling' : 'nextSibling';\n        let sibling = row[methodClbk];\n        if (sibling === null) return;\n\n        let lastVisitedSibling = sibling;\n\n        for (let i = 0; i < this.pageUpDown - 1 && sibling; i++) {\n          sibling = sibling[methodClbk];\n          if (sibling) {\n            lastVisitedSibling = sibling;\n          }\n        }\n        destinationRow = sibling ? sibling : lastVisitedSibling;\n      } else {\n        destinationRow =\n          direction === 'prev' ? siblings[0] : siblings[siblings.length - 1];\n      }\n      if (!destinationRow || !(destinationRow instanceof Element)) return;\n\n      const child = destinationRow.children[position];\n      if (child && this.isFocusable(child)) child.focus();\n    }\n  }\n\n  private verticalCellNavigation(e: KeyboardEvent) {\n    if (!(e.target instanceof Element)) return;\n    const row = e.target.closest(this.selectors.Row) as Element;\n    const cell = e.target.closest(this.selectors.Cell) as Element;\n\n    if (row && cell) {\n      const cellPosition = this.getColumnIndex(cell);\n      const rowPosition = this.getRowIndex(row);\n      this.debugLog('gridNavigation', `Initial row position: ${rowPosition}`);\n      this.debugLog('gridNavigation', `Initial cell position: ${cellPosition}`);\n      if (cellPosition === undefined || rowPosition === undefined) {\n        this.debugLog(\n          'verticalCellNavigation',\n          'row or cell position not found'\n        );\n        return;\n      }\n\n      const direction = e.key === Keys.ArrowUp ? 'prev' : 'next';\n\n      /** Find previous rowgroup and focus on the proper cell */\n      if (rowPosition === 0 && direction === 'prev') {\n        const currentRowGroup = row.parentElement?.closest(\n          this.selectors.RowGroup\n        );\n        const siblingRowGroups = [\n          ...(currentRowGroup?.parentElement?.children || []),\n        ];\n        const currentRowGroupIdx = siblingRowGroups.findIndex(\n          (el) => el === currentRowGroup\n        );\n        if (currentRowGroupIdx !== 0) {\n          const previousRowGroup = siblingRowGroups[currentRowGroupIdx - 1];\n          const rows = [\n            ...previousRowGroup.querySelectorAll(this.selectors.Row),\n          ];\n          const child = rows[rows.length - 1].children[cellPosition];\n          if (child && this.isFocusable(child)) child.focus();\n          return;\n        }\n      }\n\n      const siblingRows = [\n        ...(row.parentElement?.querySelectorAll(this.selectors.Row) || []),\n      ];\n      /** Find next rowgroup and focus on the proper cell */\n      if (rowPosition === siblingRows.length - 1 && direction === 'next') {\n        const currentRowGroup = row.parentElement?.closest(\n          this.selectors.RowGroup\n        );\n        const siblingRowGroups = [\n          ...(currentRowGroup?.parentElement?.children || []),\n        ];\n        const currentRowGroupIdx = siblingRowGroups.findIndex(\n          (el) => el === currentRowGroup\n        );\n        if (currentRowGroupIdx !== siblingRowGroups.length - 1) {\n          const nextRowGroup = siblingRowGroups[currentRowGroupIdx + 1];\n          const rows = [...nextRowGroup.querySelectorAll(this.selectors.Row)];\n          const child = rows[0].children[cellPosition];\n          if (child && this.isFocusable(child)) child.focus();\n          return;\n        }\n        return;\n      }\n\n      /** Navigation in the same rowgroup */\n      const destinationRow = this.findUntil(direction, row, this.selectors.Row);\n      if (!destinationRow) return;\n\n      const child = destinationRow.children[cellPosition];\n      if (child && this.isFocusable(child)) child.focus();\n    }\n  }\n\n  /**\n   * Sending a row `Element` and then the first cell will be focused.\n   *\n   * If you want to focus the last cell then the row children can be passed in\n   * reversed order\n   */\n  private focusOnFirstCell(el: Element[]) {\n    for (let i = 0; i < el.length; i++) {\n      const child = el[i];\n      if (this.isFocusable(child)) {\n        child.focus();\n        return;\n      }\n    }\n  }\n\n  /**\n   * Get the column index of a `cell` based on the first `row` parent.\n   * `cellIndex` could be used, but it's not supported in HTML tables.\n   */\n  private getColumnIndex(cell: Element) {\n    let position = 0;\n    const siblings = cell?.parentNode?.children;\n    if (!siblings) return undefined;\n\n    while (cell !== siblings[position] && siblings[position] !== undefined) {\n      position++;\n    }\n\n    // Cell position find was not possible, maybe should log here\n    if (siblings[position] === undefined) {\n      this.debugLog('getColumnIndex', 'position finding was not successful');\n      return undefined;\n    }\n    return position;\n  }\n\n  /**\n   * Get the row index of a `row` based\n   * on its sibling rows\n   */\n  private getRowIndex(row: Element) {\n    let position = 0;\n    const siblings = row?.parentNode?.children;\n    if (!siblings) return undefined;\n\n    while (row !== siblings[position] && siblings[position] !== undefined) {\n      position++;\n    }\n\n    // Cell position find was not possible\n    if (siblings[position] === undefined) {\n      this.debugLog('getRowIndex', 'position finding was not successful');\n      return undefined;\n    }\n    return position;\n  }\n\n  /**\n   * Equivalent to prevUntil/nextUntil in jQuery\n   * https://api.jquery.com/prevUntil/\n   */\n  private findUntil(\n    direction: 'next' | 'prev',\n    el: Element | ChildNode,\n    matchSelector: string,\n    exitSelector?: string\n  ): FocusableElement | null {\n    let element: ChildNode = el;\n    const method = direction === 'next' ? 'nextSibling' : 'previousSibling';\n\n    while (element[method]) {\n      const sibling = element[method];\n      if (!sibling) return null;\n      if (\n        exitSelector &&\n        sibling instanceof Element &&\n        sibling.matches(exitSelector)\n      ) {\n        return null;\n      }\n\n      if (sibling instanceof Element && sibling.matches(matchSelector)) {\n        return sibling as FocusableElement;\n      }\n\n      element = sibling;\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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","names":["child"]}