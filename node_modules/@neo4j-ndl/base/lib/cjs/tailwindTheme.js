"use strict";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tailwindTheme = void 0;
var tokens_esm_1 = require("./tokens/js/tokens-esm");
/**
 * This function is adding agnostic
 * palette classes to the tailwind config.
 *
 * Example class:
 * `.n-palette-light-primary-text-default`
 * will point to the scoped CSS variable:
 * `--theme-palette-primary-text-default`
 */
var themedPalette = function () {
    var result = {};
    var extractValue = function (input, flatkey) {
        if (flatkey === void 0) { flatkey = ''; }
        if (typeof input === 'object') {
            Object.keys(input).forEach(function (key) {
                extractValue(input[key], "".concat(flatkey, "-").concat(key));
            });
        }
        if (typeof input === 'string') {
            /**
             * Values will always be in the RGBA form:
             * - 255, 255, 255 / 0.5
             * And we wrap them to rgb() CSS function
             */
            flatkey = flatkey.replace('light-', '');
            result[flatkey] = "rgb(var(--theme-".concat(flatkey, "))");
        }
    };
    extractValue(tokens_esm_1.tokens.theme.light.palette, 'palette');
    return result;
};
var _a = tokens_esm_1.tokens.zIndex, zIndexAlias = _a.alias, zIndexWithoutAlias = __rest(_a, ["alias"]);
/**
 * This function is adding agnostic
 * shadow classes to the tailwind config.
 *
 * Example class:
 * `.n-shadow-overlay`
 * will point to the scoped CSS variable:
 * `--theme-shadow-overlay`
 */
var themedShadows = function () {
    var result = {};
    var extractValue = function (input, flatkey) {
        if (flatkey === void 0) { flatkey = ''; }
        if (typeof input === 'object') {
            Object.keys(input).forEach(function (key) {
                extractValue(input[key], "".concat(flatkey, "-").concat(key));
            });
        }
        if (typeof input === 'string') {
            flatkey = flatkey.replace('light-', '');
            // Remove "shadow-" prefix as tailwind appends it automatically
            var key = flatkey.replace('shadow-', '');
            result[key] = "var(--theme-".concat(flatkey, ")");
        }
    };
    extractValue(tokens_esm_1.tokens.theme.light.boxShadow, 'shadow');
    return result;
};
/** Prefixes all keys of an object with a given string, used for flat objects only */
var prefixProperties = function (obj, prefix) {
    return Object.keys(obj).reduce(function (acc, curr) {
        acc["".concat(prefix, "-").concat(curr)] = obj[curr];
        return acc;
    }, {});
};
/** @type {import('tailwindcss').Config['theme']} */
exports.tailwindTheme = {
    colors: __assign(__assign(__assign({}, tokens_esm_1.tokens.colors), { dark: __assign({}, tokens_esm_1.tokens.theme.dark.palette), light: __assign({}, tokens_esm_1.tokens.theme.light.palette) }), themedPalette()),
    borderRadius: tokens_esm_1.tokens.borderRadius,
    boxShadow: __assign(__assign(__assign({}, prefixProperties(tokens_esm_1.tokens.theme.dark.boxShadow, 'dark')), prefixProperties(tokens_esm_1.tokens.theme.light.boxShadow, 'light')), themedShadows()),
    /**
     * Avoid colors being generated as shadow color classes
     * Source: https://github.com/tailwindlabs/tailwindcss/discussions/11933
     */
    boxShadowColor: {},
    zIndex: __assign(__assign({}, zIndexAlias), zIndexWithoutAlias),
    fontFamily: {
        sans: ['"Public Sans"'],
        mono: ['"Fira Code"'],
    },
    screens: __assign({}, tokens_esm_1.tokens.breakpoints),
    /** Use our custom animation tokens */
    transitionTimingFunction: {
        DEFAULT: tokens_esm_1.tokens.transitions.values['timing-function'].default,
    },
    transitionDuration: {
        DEFAULT: tokens_esm_1.tokens.transitions.values.duration.quick,
        quick: tokens_esm_1.tokens.transitions.values.duration.quick,
        slow: tokens_esm_1.tokens.transitions.values.duration.slow,
    },
    transitionProperty: {
        all: tokens_esm_1.tokens.transitions.values.properties.default,
    },
};
//# sourceMappingURL=tailwindTheme.js.map