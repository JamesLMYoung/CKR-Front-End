"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatePicker = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = require("react");
const react_datepicker_1 = __importDefault(require("react-datepicker"));
const defaultImports_1 = require("../_common/defaultImports");
const icons_1 = require("../icons");
const text_input_1 = require("../text-input");
const helpers_1 = require("../helpers");
const button_1 = require("../button");
const typography_1 = require("../typography");
const date_fns_1 = require("date-fns");
exports.DatePicker = (0, helpers_1.forwardRef)(function DatePicker(props, ref) {
    const { reactDatePickerProps, textInputProps, disabled, className } = props;
    const classes = (0, defaultImports_1.classNames)(`ndl-datepicker`, className, {});
    const datetimeRef = (0, react_1.useRef)(null);
    const [picker, setPicker] = (0, react_1.useState)('day');
    const headerAction = (0, react_1.useCallback)((action) => {
        picker === action ? setPicker('day') : setPicker(action);
    }, [picker]);
    const CustomHeader = (0, react_1.useCallback)((props) => {
        const { decreaseMonth, increaseMonth, increaseYear, decreaseYear, nextMonthButtonDisabled, nextYearButtonDisabled, prevMonthButtonDisabled, prevYearButtonDisabled, } = props;
        const prevCallback = picker === 'year' ? decreaseYear : decreaseMonth;
        const nextCallback = picker === 'year' ? increaseYear : increaseMonth;
        const prevDisabled = picker === 'year' ? prevYearButtonDisabled : prevMonthButtonDisabled;
        const nextDisabled = picker === 'year' ? nextYearButtonDisabled : nextMonthButtonDisabled;
        return ((0, jsx_runtime_1.jsxs)("div", { className: "ndl-datepicker-header", children: [(0, jsx_runtime_1.jsxs)("div", { className: "ndl-datepicker-selects", children: [(0, jsx_runtime_1.jsx)("button", { className: "ndl-datepicker-header", onClick: () => headerAction('month'), children: (0, jsx_runtime_1.jsxs)("div", { className: "n-flex n-items-center", children: [(0, jsx_runtime_1.jsx)(typography_1.Typography, { variant: "label", className: "n-p-2", children: (0, date_fns_1.format)(props.date, 'MMMM') }), (0, jsx_runtime_1.jsx)(icons_1.ChevronDownIconOutline, { className: (0, defaultImports_1.classNames)('ndl-datepicker-chevron', {
                                            'n-rotate-180': picker === 'month',
                                        }), "aria-label": "Chevron icon" })] }) }), (0, jsx_runtime_1.jsx)("button", { className: "ndl-datepicker-header", onClick: () => headerAction('year'), children: (0, jsx_runtime_1.jsxs)("div", { className: "n-flex n-items-center", children: [(0, jsx_runtime_1.jsx)(typography_1.Typography, { variant: "label", className: "n-p-2", children: (0, date_fns_1.format)(props.date, 'yyyy') }), (0, jsx_runtime_1.jsx)(icons_1.ChevronDownIconOutline, { className: (0, defaultImports_1.classNames)('ndl-datepicker-chevron', {
                                            'n-rotate-180': picker === 'year',
                                        }), "aria-label": "Chevron icon" })] }) })] }), picker !== 'month' && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(button_1.IconButton, { "aria-label": "Previous period", clean: true, onClick: prevCallback, disabled: prevDisabled, children: (0, jsx_runtime_1.jsx)(icons_1.ArrowLeftIconOutline, {}) }), (0, jsx_runtime_1.jsx)(button_1.IconButton, { "aria-label": "Next period", clean: true, onClick: nextCallback, disabled: nextDisabled, children: (0, jsx_runtime_1.jsx)(icons_1.ArrowRightIconOutline, {}) })] }))] }));
    }, [picker, headerAction]);
    /**
     * Intercept onChange so we can work with
     * Month and Year pickers
     */
    const interceptedChange = (0, react_1.useCallback)((...args) => {
        if (picker !== 'day') {
            reactDatePickerProps === null || reactDatePickerProps === void 0 ? void 0 : reactDatePickerProps.onChange(...args);
            setPicker('day');
        }
        else {
            reactDatePickerProps === null || reactDatePickerProps === void 0 ? void 0 : reactDatePickerProps.onChange(...args);
        }
    }, [picker, reactDatePickerProps]);
    /**
     * Intercept onCalendarClose so we can
     * switch to "day" picker if we close on "month" or "year"
     * view
     */
    const interceptedOnCalendarClose = (0, react_1.useCallback)(() => {
        var _a;
        if (picker !== 'day') {
            setPicker('day');
        }
        (_a = reactDatePickerProps === null || reactDatePickerProps === void 0 ? void 0 : reactDatePickerProps.onCalendarClose) === null || _a === void 0 ? void 0 : _a.call(reactDatePickerProps);
    }, [picker, reactDatePickerProps]);
    return ((0, jsx_runtime_1.jsx)("div", { className: classes, children: (0, jsx_runtime_1.jsx)(react_datepicker_1.default, Object.assign({ ref: datetimeRef, customInput: (0, jsx_runtime_1.jsx)(text_input_1.TextInput, Object.assign({ ref: ref, "aria-label": "Date picker input", rightIcon: (0, jsx_runtime_1.jsx)(icons_1.CalendarIconOutline, { onClick: (e) => {
                        var _a;
                        if ((_a = datetimeRef.current) === null || _a === void 0 ? void 0 : _a.isCalendarOpen()) {
                            datetimeRef.current.setOpen(false);
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    }, "aria-label": "Calender Icon" }) }, textInputProps, { disabled: disabled })), disabled: disabled, showMonthYearPicker: picker === 'month', showYearPicker: picker === 'year', shouldCloseOnSelect: picker === 'day', dayClassName: () => 'ndl-datepicker-day', renderCustomHeader: CustomHeader }, reactDatePickerProps, { onChange: interceptedChange, onCalendarClose: interceptedOnCalendarClose })) }));
});
//# sourceMappingURL=DatePicker.js.map