"use strict";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRefObject = exports.randomId = exports.useOnClickOutside = exports.useDocumentScrollToggle = exports.needleWarningMessage = exports.removeSpaces = exports.removeNewlines = void 0;
const react_1 = require("react");
const removeNewlines = (input) => input.replace(/(\r\n|\n|\r)/gm, '');
exports.removeNewlines = removeNewlines;
/** Remove extra spaces from sting */
const removeSpaces = (input) => input.replace(/\s+/g, ' ').trim();
exports.removeSpaces = removeSpaces;
const needleWarningMessage = (message) => console.warn(`[ðŸª¡ Needle]:  ${message}`);
exports.needleWarningMessage = needleWarningMessage;
const getScrollbarSize = (doc) => {
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
};
const getPaddingRight = (element) => parseInt(window.getComputedStyle(element).paddingRight, 10) || 0;
/**
 * Toggles scroll on the provided document.
 * Useful for disabling scroll when a popup is open (ie ContextMenu/Modal)
 */
const useDocumentScrollToggle = () => {
    const bodyPadding = (0, react_1.useRef)(0);
    return (0, react_1.useCallback)((disable, doc = document) => {
        if (disable) {
            const existingPaddingRight = getPaddingRight(doc.body);
            bodyPadding.current = existingPaddingRight;
            const newPaddingRight = existingPaddingRight + getScrollbarSize(doc);
            doc.body.style.overflow = 'hidden';
            doc.body.style.paddingRight = `${newPaddingRight}px`;
        }
        else {
            doc.body.style.overflow = '';
            doc.body.style.paddingRight = `${bodyPadding.current}px`;
        }
    }, []);
};
exports.useDocumentScrollToggle = useDocumentScrollToggle;
/**
 * Detect if there is a click event outside
 * of the provided element
 * Source:
 * https://hashnode.com/post/useonclickoutside-custom-hook-to-detect-the-mouse-click-on-outside-typescript-ckrejmy3h0k5r91s18iu42t28
 */
const useOnClickOutside = (ref, handler) => {
    (0, react_1.useEffect)(() => {
        const listener = (event) => {
            const el = ref === null || ref === void 0 ? void 0 : ref.current;
            if (!el || el.contains((event === null || event === void 0 ? void 0 : event.target) || null)) {
                return;
            }
            handler(event); // Call the handler only if the click is outside of the element passed.
        };
        document.addEventListener('mousedown', listener);
        document.addEventListener('touchstart', listener);
        return () => {
            document.removeEventListener('mousedown', listener);
            document.removeEventListener('touchstart', listener);
        };
    }, [ref, handler]); // Reload only if ref or handler changes
};
exports.useOnClickOutside = useOnClickOutside;
/**
 *  X - char long pseudo-random string
 */
const randomId = (length) => Math.random()
    .toString(36)
    .slice(2, length + 2);
exports.randomId = randomId;
// Utility / Type-Guard if the object is a ref
function isRefObject(obj) {
    return obj && typeof obj === 'object' && 'current' in obj;
}
exports.isRefObject = isRefObject;
//# sourceMappingURL=utils.js.map