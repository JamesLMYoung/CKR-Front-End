"use strict";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSizeConstrained = exports.gridGenerator = exports.userFriendlyPagination = void 0;
/**
 * Modified from here: https://gist.github.com/kottenator/9d936eb3e4e3c3e02598
 *
 * @param current Current Index
 * @param max Max Index
 * @returns
 */
const userFriendlyPagination = (current, max) => {
    const last = max;
    const delta = 1;
    const left = current - delta;
    const right = current + delta + 1;
    const range = [];
    const rangeWithDots = [];
    let length;
    for (let i = 1; i <= last; i += 1) {
        if (i === 1 || i === last || (i >= left && i < right)) {
            range.push(i);
        }
    }
    for (let i = 0; i < range.length; i += 1) {
        if (length) {
            if (range[i] - length === 2) {
                rangeWithDots.push(length + 1);
            }
            else if (range[i] - length !== 1) {
                rangeWithDots.push('...');
            }
        }
        rangeWithDots.push(range[i]);
        length = range[i];
    }
    return rangeWithDots;
};
exports.userFriendlyPagination = userFriendlyPagination;
/**
 * Simple helper to generate inline grid style
 * to be responsive.
 *
 * Secret sauce:
 * The last element takes an "auto" width, so it will
 * fill the available space, and the result till be for 4 columns:
 * minmax(min column1Sizepx,column1Sizepx) minmax(min column2Sizepx,column2Sizepx) ... minmax(columnNSizepx, auto)
 */
const gridGenerator = (table) => {
    const visibleColumns = table.getVisibleFlatColumns();
    const tableDefaultMin = table._getDefaultColumnDef().minSize;
    // 20 is the default value that is set in Tanstack. For us the min size is too
    // small so we increase it to look better per default.
    // https://github.com/TanStack/table/blob/main/docs/guide/column-sizing.md
    const defaultMin = tableDefaultMin !== 20 ? tableDefaultMin : 100;
    // If there are actions, we want the last column to be fixed sized
    // and the rest to be auto.
    return visibleColumns
        .map((i, idx) => {
        var _a;
        return visibleColumns.length === idx + 1
            ? `minmax(${i.getSize()}px ,auto)`
            : `minmax(${((_a = table.getColumn(i.id)) === null || _a === void 0 ? void 0 : _a.columnDef.minSize) || defaultMin}px,${i.getSize()}px)`;
    })
        .join(' ');
};
exports.gridGenerator = gridGenerator;
/**
 * Check if the column is size constrained,
 * so we can let the column's width grow with `flex-grow: 1`
 * @param columnDef
 */
const isSizeConstrained = (columnDef) => columnDef.size !== undefined && columnDef.size !== 150;
exports.isSizeConstrained = isSizeConstrained;
//# sourceMappingURL=helpers.js.map