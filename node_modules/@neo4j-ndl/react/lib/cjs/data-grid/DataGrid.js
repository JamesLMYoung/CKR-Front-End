"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGridComponents = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const defaultImports_1 = require("../_common/defaultImports");
const helpers_1 = require("../helpers");
const react_1 = require("react");
const DataGridContext_1 = require("./DataGridContext");
const Components_1 = require("./Components");
const react_2 = require("@table-nav/react");
exports.DataGridComponents = {
    ResizingBar: Components_1.ResizingBar,
    Header: Components_1.Header,
    Body: Components_1.Body,
    BodyCell: Components_1.BodyCell,
    BodyRow: Components_1.BodyRow,
    HeaderCell: Components_1.HeaderCell,
    ActionButton: Components_1.ActionButton,
    ColumnControls: Components_1.ColumnControls,
    Navigation: Components_1.Navigation,
    TableResults: Components_1.TableResults,
    RowsPerPage: Components_1.RowsPerPage,
    Pagination: Components_1.Pagination,
    PaginationNumericButtons: Components_1.PaginationNumericButtons,
    PaginationNumericButton: Components_1.PaginationNumericButton,
    PaginationArrowButton: Components_1.PaginationArrowButton,
    LoadingPlaceholder: Components_1.LoadingPlaceholder,
    NoDataPlaceholder: Components_1.NoDataPlaceholder,
    Scrollable: Components_1.Scrollable,
};
var BorderStyleEnum;
(function (BorderStyleEnum) {
    BorderStyleEnum["AllSides"] = "all-sides";
    BorderStyleEnum["Horizontal"] = "horizontal";
    BorderStyleEnum["None"] = "none";
})(BorderStyleEnum || (BorderStyleEnum = {}));
var HeaderStyleEnum;
(function (HeaderStyleEnum) {
    HeaderStyleEnum["Filled"] = "filled";
    HeaderStyleEnum["Clean"] = "clean";
})(HeaderStyleEnum || (HeaderStyleEnum = {}));
const DEFAULT_STYLING = {
    zebraStriping: false,
    borderStyle: BorderStyleEnum.Horizontal,
    headerStyle: HeaderStyleEnum.Filled,
};
const DataGrid = (0, helpers_1.forwardRef)(function DataGrid({ isResizable = true, isLoading = false, isKeyboardNavigable = false, isAutoResizingColumns = true, tableInstance, components, rootProps, styling = {}, tableNavRef, }, ref) {
    const { className = '', style = {} } = rootProps || {};
    const Styling = (0, react_1.useMemo)(() => (Object.assign(Object.assign({}, DEFAULT_STYLING), styling)), [styling]);
    const Components = (0, react_1.useMemo)(() => (Object.assign(Object.assign({}, exports.DataGridComponents), components)), [components]);
    const ScrollableContainer = (Components === null || Components === void 0 ? void 0 : Components.Scrollable)
        ? Components.Scrollable
        : Components_1.Scrollable;
    const { listeners, tableNav: tableNavigationReference } = (0, react_2.useTableNav)({
        debug: false,
    });
    /** Surface the tableNav instance for programmatic control if needed */
    (0, react_1.useImperativeHandle)(tableNavRef, () => tableNavigationReference, [
        tableNavigationReference,
    ]);
    return ((0, jsx_runtime_1.jsx)(DataGridContext_1.DataGridContext.Provider, { value: {
            resizable: isResizable,
            tableProps: tableInstance,
            loading: isLoading,
            components: Components,
            resizeColumns: isAutoResizingColumns,
        }, children: (0, jsx_runtime_1.jsxs)("div", Object.assign({}, rootProps, (isKeyboardNavigable ? listeners : {}), { className: (0, defaultImports_1.classNames)('ndl-data-grid-root', className, {
                'ndl-data-grid-focusable-cells': isKeyboardNavigable,
                'ndl-data-grid-zebra-striping': Styling.zebraStriping,
                'ndl-data-grid-border-all-sides': Styling.borderStyle === BorderStyleEnum.AllSides,
                'ndl-data-grid-border-horizontal': Styling.borderStyle === BorderStyleEnum.Horizontal,
                'ndl-data-grid-header-filled': Styling.headerStyle === HeaderStyleEnum.Filled,
            }), style: style, ref: ref, children: [(0, jsx_runtime_1.jsx)(ScrollableContainer, { children: (0, jsx_runtime_1.jsxs)("div", { className: "ndl-div-table", role: "grid", "aria-busy": isLoading ? 'true' : 'false', children: [(Components === null || Components === void 0 ? void 0 : Components.Header) && (0, jsx_runtime_1.jsx)(Components.Header, {}), (Components === null || Components === void 0 ? void 0 : Components.Body) && (0, jsx_runtime_1.jsx)(Components.Body, {})] }) }), (Components === null || Components === void 0 ? void 0 : Components.Navigation) && (0, jsx_runtime_1.jsx)(Components.Navigation, {})] })) }));
});
exports.default = DataGrid;
//# sourceMappingURL=DataGrid.js.map