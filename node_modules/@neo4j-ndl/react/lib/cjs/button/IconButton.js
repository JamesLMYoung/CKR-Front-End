"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = __importDefault(require("react"));
const defaultImports_1 = require("../_common/defaultImports");
const loading_spinner_1 = require("../loading-spinner");
const utils_1 = require("../_common/utils");
exports.IconButton = react_1.default.forwardRef(function Button(_a, ref) {
    var { children, as, type = 'button', loading = false, disabled = false, size = 'medium', className, onClick, grouped, floating = false, danger, clean, active = false } = _a, restProps = __rest(_a, ["children", "as", "type", "loading", "disabled", "size", "className", "onClick", "grouped", "floating", "danger", "clean", "active"]);
    let Component = as || 'button';
    if (!as && restProps.href) {
        Component = 'a';
    }
    const interactable = !disabled && !loading;
    const classes = (0, defaultImports_1.classNames)(`ndl-icon-btn ${className}`, {
        'ndl-small': size === 'small',
        'ndl-medium': size === 'medium',
        'ndl-large': size === 'large',
        'ndl-grouped': grouped,
        'ndl-disabled': disabled,
        'ndl-loading': loading,
        'ndl-floating': floating,
        'ndl-danger': danger,
        'ndl-clean': clean,
        'ndl-active': active,
    });
    if (clean && floating) {
        (0, utils_1.needleWarningMessage)("Can't have 'clean' and 'floating' props true at the same time");
    }
    if (!restProps['aria-label']) {
        (0, utils_1.needleWarningMessage)('Icon buttons do not have text, be sure to include an aria-label for screen readers link: https://dequeuniversity.com/rules/axe/4.4/button-name?application=axeAPI');
    }
    const handleClick = (e) => {
        if (!interactable) {
            // By default, a <button /> element with disabled set to true will not get its
            // on click handler called. To support the same behavior on <a /> tags we
            // swallow the event here when disabled, since the <a /> tag with disabled set to
            // true will have its onClick handler called
            e.preventDefault();
            e.stopPropagation();
            return;
        }
        if (onClick) {
            onClick(e);
        }
        else if (!restProps.href) {
            console.error('onClick was not provided');
        }
    };
    return ((0, jsx_runtime_1.jsx)(Component
    /** First props and then className to avoid overriding in classNames */
    , Object.assign({}, restProps, (Component === 'button' ? { type } : {}), { onClick: handleClick, disabled: !interactable, className: classes, ref: ref, children: loading ? ((0, jsx_runtime_1.jsx)(loading_spinner_1.LoadingSpinner, { size: "small" })) : ((0, jsx_runtime_1.jsx)("div", { className: "ndl-icon", children: children })) })));
});
//# sourceMappingURL=IconButton.js.map