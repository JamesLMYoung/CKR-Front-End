"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = exports.LabelColors = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = __importDefault(require("react"));
const defaultImports_1 = require("../_common/defaultImports");
const icons_1 = require("../icons");
/**
 *
 *
 * Types
 *
 *
 */
exports.LabelColors = [
    'info',
    'success',
    'warning',
    'danger',
    'default',
];
exports.Label = react_1.default.forwardRef(function Label(_a, ref) {
    var { color = 'default', children, className, fill = 'filled', withIcon = false } = _a, restProps = __rest(_a, ["color", "children", "className", "fill", "withIcon"]);
    let baseClasses;
    let icon;
    // Clean Label without icon is not allowed
    if (!withIcon && fill === 'clean') {
        console.error('Label without icon is not allowed');
    }
    // All colors map to the light-theme palette except the info
    const mappedColor = color === 'info' ? 'primary' : color;
    if (withIcon) {
        const isFilled = fill === 'filled';
        if (mappedColor === 'default') {
            const fillColor = isFilled
                ? 'currentColor'
                : 'rgb(var(--theme-palette-neutral-bg-status))';
            icon = (0, jsx_runtime_1.jsx)(icons_1.SquareIcon, { color: fillColor });
        }
        else if (mappedColor === 'primary') {
            const fillColor = isFilled
                ? 'currentColor'
                : 'rgb(var(--theme-palette-primary-bg-status))';
            icon = (0, jsx_runtime_1.jsx)(icons_1.CircleIcon, { color: fillColor });
        }
        else if (mappedColor === 'success') {
            const fillColor = isFilled
                ? 'currentColor'
                : 'rgb(var(--theme-palette-success-bg-status))';
            icon = (0, jsx_runtime_1.jsx)(icons_1.CircleIcon, { color: fillColor });
        }
        else if (mappedColor === 'danger') {
            const fillColor = isFilled
                ? 'currentColor'
                : 'rgb(var(--theme-palette-danger-bg-status))';
            icon = (0, jsx_runtime_1.jsx)(icons_1.RhombusIcon, { color: fillColor });
        }
        else if (mappedColor === 'warning') {
            const fillColor = isFilled
                ? 'currentColor'
                : 'rgb(var(--theme-palette-warning-bg-status))';
            icon = (0, jsx_runtime_1.jsx)(icons_1.TriangleIcon, { color: fillColor });
        }
    }
    if (mappedColor === 'default') {
        baseClasses = (0, defaultImports_1.classNames)({
            [`n-bg-palette-neutral-bg-strongest n-text-palette-neutral-text-inverse`]: fill === 'filled',
            // TODO: There currently is no token for border theme color neutral 60, needs to be added.
            [` n-text-palette-neutral-text-weak n-border-palette-neutral-border-strong`]: fill === 'outlined',
            [`n-bg-palette-neutral-bg-default n-text-palette-neutral-text-weak n-border-palette-neutral-border-strong`]: fill === 'semi-filled',
            [`n-text-palette-neutral-text-weaker`]: fill === 'clean',
        });
    }
    else {
        baseClasses = (0, defaultImports_1.classNames)({
            [`n-bg-palette-${mappedColor}-bg-strong n-text-palette-neutral-text-inverse`]: fill === 'filled',
            [`n-text-palette-${mappedColor}-text n-border-palette-${mappedColor}-border-strong`]: fill === 'outlined',
            [`n-bg-palette-${mappedColor}-bg-weak n-text-palette-${mappedColor}-text n-border-palette-${mappedColor}-border-weak`]: fill === 'semi-filled',
            [`n-text-palette-neutral-text-default`]: fill === 'clean',
        });
    }
    const classes = (0, defaultImports_1.classNames)('ndl-label', baseClasses, className, {
        'ndl-filled': fill === 'filled',
        'ndl-clean': fill === 'clean',
        'ndl-outlined': fill === 'outlined',
        'ndl-semi-filled': fill === 'semi-filled',
    });
    return ((0, jsx_runtime_1.jsx)("span", Object.assign({ role: "status", "aria-label": "label", className: classes }, restProps, { ref: ref, children: (0, jsx_runtime_1.jsxs)("div", { className: "ndl-label-content", children: [icon, (0, jsx_runtime_1.jsx)("span", { 
                    // To enable native tooltip on hover if the children is a string
                    title: typeof children === 'string' ? children : 'label', className: "ndl-label-text", children: children })] }) })));
});
exports.default = exports.Label;
//# sourceMappingURL=Label.js.map