"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Popover = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = require("react");
const defaultImports_1 = require("../_common/defaultImports");
const helpers_1 = require("../helpers");
const portal_1 = require("../portal");
const utils_1 = require("../_common/utils");
const messages_1 = require("../_common/messages");
const coditionalWrap_1 = require("../_common/coditionalWrap");
const react_focus_lock_1 = __importDefault(require("react-focus-lock"));
const ThemeProvider_1 = require("../theme/ThemeProvider");
const getOffsetTop = (rect, vertical) => {
    let offset = 0;
    if (vertical === 'bottom') {
        offset = rect.height;
    }
    return offset;
};
const getOffsetLeft = (rect, horizontal) => {
    switch (horizontal) {
        case 'right':
            return rect.width;
        case 'center':
            return rect.width / 2;
        case 'left':
            return 0;
    }
};
exports.Popover = (0, react_1.forwardRef)(function Popover(_a, ref) {
    var { as = 'div', children, open, anchorEl, onClose, anchorOrigin = { vertical: 'bottom', horizontal: 'left' }, transformOrigin = { vertical: 'top', horizontal: 'left' }, transformOriginOffsetFromAnchorOrigin = { vertical: 0, horizontal: 0 }, className, anchorPortal, disableBackdrop = false, nested = false, captureFocus = true, focusLockProps = {} } = _a, restProps = __rest(_a, ["as", "children", "open", "anchorEl", "onClose", "anchorOrigin", "transformOrigin", "transformOriginOffsetFromAnchorOrigin", "className", "anchorPortal", "disableBackdrop", "nested", "captureFocus", "focusLockProps"]);
    const Component = as;
    const popoverRef = (0, react_1.useRef)(null);
    const backdropRef = (0, react_1.useRef)(null);
    const toggleScrollbar = (0, utils_1.useDocumentScrollToggle)();
    const { themeClassName } = (0, ThemeProvider_1.useNeedleTheme)();
    (0, utils_1.useOnClickOutside)(popoverRef, (event) => {
        disableBackdrop
            ? onClose && onClose(event)
            : null;
    });
    // Override ref to map to internal ref
    (0, react_1.useImperativeHandle)(ref, () => {
        const popover = popoverRef.current;
        if (!popover) {
            return null;
        }
        return popover;
    });
    const [enter, setEnter] = (0, react_1.useState)(false);
    const baseClasses = (0, defaultImports_1.classNames)({
        'ndl-open': open,
        'ndl-enter': enter,
    });
    const getPositioningStyles = (0, react_1.useCallback)((element) => {
        const anchor = (0, utils_1.isRefObject)(anchorEl) ? anchorEl.current : anchorEl;
        if (!(anchor instanceof HTMLElement)) {
            console.warn(messages_1.anchorElNotSetWarningMessage);
            return;
        }
        const anchorRect = anchor.getBoundingClientRect();
        const menuRect = {
            width: element.offsetWidth,
            height: element.offsetHeight,
        };
        let transformX;
        switch (transformOrigin.horizontal) {
            case 'right':
                transformX = -menuRect.width;
                break;
            case 'center':
                transformX = -menuRect.width / 2;
                break;
            case 'left':
                transformX = 0;
                break;
        }
        transformX += transformOriginOffsetFromAnchorOrigin.horizontal;
        const transformY = (transformOrigin.vertical == 'bottom' ? -menuRect.height : 0) +
            transformOriginOffsetFromAnchorOrigin.vertical;
        const marginThreshold = 16; // An arbitrary margin between the menu popup and the border of the window
        // Window thresholds taking required margin into account
        const heightThreshold = window.innerHeight - marginThreshold;
        const widthThreshold = window.innerWidth - marginThreshold;
        let top = anchorRect.top +
            getOffsetTop(anchorRect, anchorOrigin.vertical) +
            transformY;
        let left = anchorRect.left +
            getOffsetLeft(anchorRect, anchorOrigin.horizontal) +
            transformX;
        const right = left + menuRect.width;
        const bottom = top + menuRect.height;
        // Check if the vertical axis needs shifting
        if (top < marginThreshold) {
            const diff = top - marginThreshold;
            top -= diff;
        }
        else if (bottom > heightThreshold) {
            const diff = bottom - heightThreshold;
            top -= diff;
        }
        // Check if the horizontal axis needs shifting
        if (left < marginThreshold) {
            const diff = left - marginThreshold;
            left -= diff;
        }
        else if (right > widthThreshold) {
            // Flip to the left side
            left = anchorRect.left - element.getBoundingClientRect().width;
        }
        return {
            top,
            left,
        };
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [anchorOrigin, transformOrigin, anchorEl]);
    const setPositioningStyles = (0, react_1.useCallback)(() => {
        const element = popoverRef.current;
        if (!element) {
            return;
        }
        const positioning = getPositioningStyles(element);
        if (!positioning)
            return;
        if (positioning.top !== null) {
            element.style.top = `${positioning.top}px`;
        }
        if (positioning.left !== null) {
            element.style.left = `${positioning.left}px`;
        }
    }, [getPositioningStyles]);
    (0, react_1.useLayoutEffect)(() => {
        // Avoid if popover/backdrop is not rendered
        if (!popoverRef.current || !backdropRef.current)
            return;
        // Select the node that will be observed for mutations
        const targetNode = document.body;
        // Simpler approach
        const popovers = [...targetNode.childNodes].filter((node) => node instanceof HTMLElement &&
            node.classList.contains('ndl-popover') &&
            node !== popoverRef.current);
        if (popovers.length > 0) {
            const max = Math.max(...popovers.map((node) => parseInt(window.getComputedStyle(node).zIndex)));
            const [backdrop, content] = [max + 2, max + 3];
            popoverRef.current.style.zIndex = `${content}`;
            backdropRef.current.style.zIndex = `${backdrop}`;
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [popoverRef.current, backdropRef.current]);
    // Disable scroll and add padding when the popover is open
    (0, react_1.useEffect)(() => {
        if (nested) {
            return;
        }
        toggleScrollbar(open);
        return () => {
            if (nested)
                return;
            toggleScrollbar(false);
        };
    }, [open, nested, toggleScrollbar]);
    (0, react_1.useEffect)(() => {
        if (open) {
            setPositioningStyles();
        }
    }, [open, setPositioningStyles]);
    // Set Enter to trigger fade in animation
    (0, react_1.useEffect)(() => setEnter(open), [open]);
    (0, react_1.useEffect)(() => {
        if (!open) {
            return undefined;
        }
        const handleResize = (0, helpers_1.debounce)(() => {
            setPositioningStyles();
        });
        window.addEventListener('resize', handleResize);
        return () => {
            handleResize.clear();
            window.removeEventListener('resize', handleResize);
        };
    }, [anchorEl, open, setPositioningStyles]);
    const handleBackdropClick = (event) => {
        event.stopPropagation();
        event.preventDefault();
        onClose && onClose(event);
    };
    if (!open) {
        return null;
    }
    const classes = (0, defaultImports_1.classNames)('ndl-popover', themeClassName, baseClasses, className);
    const handleKeyDown = (event) => {
        if (event.key === 'Escape') {
            onClose && onClose(event);
        }
    };
    const anchor = anchorEl.current
        ? anchorEl.current
        : anchorEl;
    return ((0, jsx_runtime_1.jsxs)(portal_1.Portal, { container: anchorPortal ? anchor || undefined : undefined, children: [(0, jsx_runtime_1.jsx)("div", { className: (0, defaultImports_1.classNames)('ndl-popover-backdrop', {
                    'ndl-allow-click-event-captured': disableBackdrop,
                }), ref: backdropRef, role: "button", tabIndex: 0, onClick: handleBackdropClick, onKeyDown: handleBackdropClick, "data-testid": "ndl-popover-backdrop", "aria-label": "Close popover" }), (0, jsx_runtime_1.jsx)(coditionalWrap_1.ConditionalWrap, { condition: captureFocus, wrapper: (children) => ((0, jsx_runtime_1.jsx)(react_focus_lock_1.default, Object.assign({ onDeactivation: () => {
                        const anchor = (0, utils_1.isRefObject)(anchorEl)
                            ? anchorEl.current
                            : anchorEl;
                        if (!(anchor instanceof HTMLElement)) {
                            console.warn(messages_1.anchorElNotSetWarningMessage);
                            return;
                        }
                        // setTimeout needed, read more: https://www.npmjs.com/package/react-focus-lock#unmounting-and-focus-management
                        setTimeout(() => anchor === null || anchor === void 0 ? void 0 : anchor.focus(), 0);
                    } }, focusLockProps, { children: children }))), children: (0, jsx_runtime_1.jsx)(Component, Object.assign({ "data-testid": "ndl-popover-content" }, restProps, { className: classes, onKeyDown: handleKeyDown, ref: popoverRef, children: children })) })] }));
});
//# sourceMappingURL=Popover.js.map