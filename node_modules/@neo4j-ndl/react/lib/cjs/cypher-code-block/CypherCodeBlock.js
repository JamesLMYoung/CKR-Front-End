"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CypherCodeBlock = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = __importStar(require("react"));
const react_codemirror_1 = require("@neo4j-cypher/react-codemirror");
const CodeBlockWrapper_1 = require("../_common/CodeBlockWrapper");
exports.CypherCodeBlock = react_1.default.forwardRef(function CypherCodeBlock({ maxHeight, code, headerTitle, theme = 'light', showLineNumbers, disabled, actions, }, ref) {
    const cypherEditorRef = (0, react_1.useRef)(null);
    const [shouldShowExpandButton, setShouldShowExpandButton] = (0, react_1.useState)(maxHeight !== undefined);
    (0, react_1.useEffect)(() => {
        var _a;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore 'CypherEditor' doesn't convey types correctly.
        const editorHtml = (_a = cypherEditorRef.current) === null || _a === void 0 ? void 0 : _a.editorRef;
        if (!editorHtml) {
            return;
        }
        const editorContentHtml = editorHtml.querySelector('.cm-content');
        if (!editorContentHtml) {
            return;
        }
        editorContentHtml.style.padding = `0 calc(0.75em + ${headerTitle === undefined || headerTitle === ''
            ? ((actions === null || actions === void 0 ? void 0 : actions.length) || (shouldShowExpandButton ? 1 : 0)) * 36
            : (shouldShowExpandButton ? 1 : 0) * 36
        // 0.45em on the left to align the header title if no showing line numbers
        }px) 0.75em 0.45em`;
    }, [headerTitle, actions, shouldShowExpandButton]);
    return ((0, jsx_runtime_1.jsx)(CodeBlockWrapper_1.CodeBlockWrapper, { ref: ref, maxHeight: maxHeight, code: code, headerTitle: headerTitle, disabled: disabled, actions: actions, shouldShowExpandButton: shouldShowExpandButton, setShouldShowExpandButton: setShouldShowExpandButton, children: (0, jsx_runtime_1.jsx)(react_codemirror_1.CypherEditor, { ref: cypherEditorRef, className: "ndl-cypher-editor ndl-cypher-code-block", lineNumbers: showLineNumbers, value: code, theme: theme, readOnly: true, readOnlyCursor: true, autofocus: false }) }));
});
//# sourceMappingURL=CypherCodeBlock.js.map