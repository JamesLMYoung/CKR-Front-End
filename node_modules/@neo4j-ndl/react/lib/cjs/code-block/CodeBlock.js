"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeBlock = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = __importStar(require("react"));
const react_syntax_highlighter_1 = require("react-syntax-highlighter");
const prism_1 = require("react-syntax-highlighter/dist/cjs/styles/prism");
const CodeBlockWrapper_1 = require("../_common/CodeBlockWrapper");
exports.CodeBlock = react_1.default.forwardRef(function CodeBlock(_a, ref) {
    var { maxHeight, code, language, showLineNumbers, theme, headerTitle, actions, disabled } = _a, rest = __rest(_a, ["maxHeight", "code", "language", "showLineNumbers", "theme", "headerTitle", "actions", "disabled"]);
    const [shouldShowExpandButton, setShouldShowExpandButton] = (0, react_1.useState)(maxHeight !== undefined);
    const getTheme = () => {
        switch (theme) {
            case 'vs':
                return prism_1.vs;
            case 'base16-ateliersulphurpool.light':
                return prism_1.base16AteliersulphurpoolLight;
            case 'coy':
                return prism_1.coy;
            case 'duotone-light':
                return prism_1.duotoneLight;
            case 'ghcolors':
                return prism_1.ghcolors;
            case 'prism':
                return prism_1.prism;
            case 'solarizedlight':
                return prism_1.solarizedlight;
            default:
                return prism_1.base16AteliersulphurpoolLight;
        }
    };
    return ((0, jsx_runtime_1.jsx)(CodeBlockWrapper_1.CodeBlockWrapper, { ref: ref, maxHeight: maxHeight, code: code, headerTitle: headerTitle, disabled: disabled, actions: actions, shouldShowExpandButton: shouldShowExpandButton, setShouldShowExpandButton: setShouldShowExpandButton, children: (0, jsx_runtime_1.jsx)(react_syntax_highlighter_1.Prism, { language: language, style: Object.assign(Object.assign({}, getTheme()), { 'pre[class*="language-"]': {
                    color: 'rgb(var(--theme-palette-neutral-text-default))',
                    lineHeight: '1',
                    width: '100%',
                    border: 0,
                    padding: `0 calc(0.75em + ${headerTitle === undefined || headerTitle === ''
                        ? ((actions === null || actions === void 0 ? void 0 : actions.length) || (shouldShowExpandButton ? 1 : 0)) * 36
                        : (shouldShowExpandButton ? 1 : 0) * 36}px) 0.75em 0.75em`,
                    overflowX: 'auto',
                    overflowY: 'auto',
                } }), 
            // Turn on 'showLineNumbers' & 'wrapLongLines' at the same time, the display is wrong
            // https://github.com/react-syntax-highlighter/react-syntax-highlighter/issues/402
            // wrapLongLines
            codeTagProps: { className: 'n-code' }, showLineNumbers: showLineNumbers, children: code }) }));
});
//# sourceMappingURL=CodeBlock.js.map