"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Breadcrumbs = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
// NPM
const context_menu_1 = require("../context-menu");
const button_1 = require("../button");
const react_1 = require("react");
// Local
const defaultImports_1 = require("../_common/defaultImports");
const icons_1 = require("../icons");
const typography_1 = require("../typography");
const BreadcrumbsBaseItem = (_a) => {
    var { as = 'a', children = (0, jsx_runtime_1.jsx)(icons_1.HomeIconOutline, {}), className, href, isCurrentPage = false, onClick } = _a, restProps = __rest(_a, ["as", "children", "className", "href", "isCurrentPage", "onClick"]);
    const Component = as;
    const classes = (0, defaultImports_1.classNames)('ndl-breadcrumbs-base-item-link', className, {
        'ndl-breadcrumbs-base-item-link-active': isCurrentPage,
    });
    return ((0, jsx_runtime_1.jsx)("li", { className: "ndl-breadcrumbs-base-item", children: (0, jsx_runtime_1.jsx)(Component
        /* Overridable */
        , Object.assign({ 
            /* Overridable */
            role: "button", tabIndex: 0 }, restProps, { 
            /* Non-overridable */
            className: classes, href: href, onClick: (event) => {
                if (onClick)
                    onClick(event, href);
            }, children: children })) }));
};
BreadcrumbsBaseItem.displayName = 'Breadcrumbs.BaseItem';
const BreadcrumbsGroupItem = (_a) => {
    var { as = 'li', children, className } = _a, restProps = __rest(_a, ["as", "children", "className"]);
    const Component = as;
    const classes = (0, defaultImports_1.classNames)('ndl-breadcrumbs-group-item', className);
    return ((0, jsx_runtime_1.jsx)(Component
    /* Overridable */
    , Object.assign({}, restProps, { 
        /* Non-overridable */
        className: classes, children: (0, jsx_runtime_1.jsx)("ol", { children: children }) })));
};
BreadcrumbsGroupItem.displayName = 'Breadcrumbs.GroupItem';
const BreadcrumbsItem = (_a) => {
    var { as = 'a', children, className, hasSeparator = true, href, isCurrentPage = false, onClick } = _a, restProps = __rest(_a, ["as", "children", "className", "hasSeparator", "href", "isCurrentPage", "onClick"]);
    const listItemClasses = (0, defaultImports_1.classNames)('ndl-breadcrumbs-item', {
        'ndl-breadcrumbs-separator': hasSeparator,
    });
    const linkClasses = (0, defaultImports_1.classNames)('ndl-breadcrumbs-item-link', {
        'ndl-breadcrumbs-item-link-active': isCurrentPage,
    }, className);
    return ((0, jsx_runtime_1.jsx)("li", { className: listItemClasses, children: (0, jsx_runtime_1.jsx)(typography_1.Typography
        /* Overridable */
        , Object.assign({ "aria-current": isCurrentPage ? 'page' : undefined, as: as, role: "button", tabIndex: 0, variant: "body-medium" }, restProps, { 
            /* Non-overridable */
            className: linkClasses, href: href, onClick: (event) => {
                if (onClick)
                    onClick(event, href);
            }, children: children })) }));
};
BreadcrumbsItem.displayName = 'Breadcrumbs.Item';
const BreadcrumbsItemMenu = (_a) => {
    var { children, className, isOpen = false, onClick, onClose } = _a, restProps = __rest(_a, ["children", "className", "isOpen", "onClick", "onClose"]);
    const buttonRef = (0, react_1.useRef)(null);
    const [isItemMenuOpen, setIsItemMenuOpen] = (0, react_1.useState)(isOpen);
    const classes = (0, defaultImports_1.classNames)('ndl-breadcrumbs-item-menu-button', className);
    return ((0, jsx_runtime_1.jsxs)("li", { className: "ndl-breadcrumbs-item-menu", children: [(0, jsx_runtime_1.jsx)(button_1.IconButton
            /* Overridable */
            , Object.assign({ "aria-haspopup": "true", "aria-label": "breadcrumbs item menu", clean: true, grouped: true, size: "small" }, restProps, { 
                /* Non-overridable */
                className: classes, onClick: (event) => {
                    setIsItemMenuOpen(true);
                    if (onClick)
                        onClick(event);
                }, ref: buttonRef, children: (0, jsx_runtime_1.jsx)(icons_1.ChevronDownIconOutline, {}) })), (0, jsx_runtime_1.jsx)(context_menu_1.Menu, { anchorEl: buttonRef, anchorOrigin: {
                    vertical: 'bottom',
                    horizontal: 'center',
                }, captureFocus: true, onClose: (event) => {
                    setIsItemMenuOpen(false);
                    if (onClose)
                        onClose(event);
                }, open: isItemMenuOpen, transformOrigin: { vertical: 'top', horizontal: 'left' }, children: (0, jsx_runtime_1.jsx)(context_menu_1.Menu.Items, { children: children }) })] }));
};
BreadcrumbsItemMenu.displayName = 'Breadcrumbs.ItemMenu';
const BreadcrumbsEllipsisMenu = (_a) => {
    var { as = 'span', children, className, isOpen = false, onClick, onClose, onKeyDown } = _a, restProps = __rest(_a, ["as", "children", "className", "isOpen", "onClick", "onClose", "onKeyDown"]);
    const ellipsisButtonRef = (0, react_1.useRef)(null);
    const ellipsisMenuRef = (0, react_1.useRef)(null);
    const [isEllipsisMenuOpen, setIsEllipsisMenuOpen] = (0, react_1.useState)(isOpen);
    const Component = as;
    const classes = (0, defaultImports_1.classNames)('ndl-breadcrumbs-ellipsis-menu-button', className);
    return ((0, jsx_runtime_1.jsxs)("li", { className: "ndl-breadcrumbs-ellipsis-menu ndl-breadcrumbs-separator", children: [(0, jsx_runtime_1.jsx)(Component
            /* Overridable */
            , Object.assign({ "aria-controls": isEllipsisMenuOpen ? 'ellipsis-menu' : undefined, "aria-expanded": isEllipsisMenuOpen ? 'true' : undefined, "aria-haspopup": "true", role: "button", tabIndex: 0 }, restProps, { 
                /* Non-overridable */
                className: classes, onClick: (event) => {
                    setIsEllipsisMenuOpen(true);
                    if (onClick)
                        onClick(event);
                }, onKeyDown: (event) => {
                    if (event.key === 'Enter')
                        setIsEllipsisMenuOpen(true);
                    if (onKeyDown)
                        onKeyDown(event);
                }, ref: ellipsisButtonRef, children: "\u2026" })), (0, jsx_runtime_1.jsx)(context_menu_1.Menu, { anchorEl: ellipsisButtonRef, captureFocus: true, onClose: (event) => {
                    setIsEllipsisMenuOpen(false);
                    if (onClose)
                        onClose(event);
                }, open: isEllipsisMenuOpen, ref: ellipsisMenuRef, children: (0, jsx_runtime_1.jsx)(context_menu_1.Menu.Items, { children: children }) })] }));
};
BreadcrumbsEllipsisMenu.displayName = 'Breadcrumbs.EllipsisMenu';
const BreadcrumbsMenuItem = (_a) => {
    var { as = 'span', children, className, href, isCurrentPage = false, onClick } = _a, restProps = __rest(_a, ["as", "children", "className", "href", "isCurrentPage", "onClick"]);
    const linkClasses = (0, defaultImports_1.classNames)('ndl-breadcrumbs-item-link', className, {
        'ndl-breadcrumbs-item-link-active': isCurrentPage,
    });
    return ((0, jsx_runtime_1.jsx)(context_menu_1.Menu.Item, { as: as, className: "ndl-breadcrumbs-menu-item", title: href ? ((0, jsx_runtime_1.jsx)(typography_1.Typography
        /* Overridable */
        , Object.assign({ "aria-current": isCurrentPage ? 'page' : undefined, as: as, role: "button", tabIndex: 0, variant: "body-medium" }, restProps, { 
            /* Non-overridable */
            className: linkClasses, href: href, onClick: (event) => {
                if (onClick)
                    onClick(event, href);
            }, children: children }))) : ((0, jsx_runtime_1.jsx)(typography_1.Typography
        /* Overridable */
        , Object.assign({ 
            /* Overridable */
            as: as, tabIndex: -1, variant: "body-medium" }, restProps, { 
            /* Non-overridable */
            className: linkClasses, children: children }))) }));
};
BreadcrumbsMenuItem.displayName = 'Breadcrumbs.MenuItem';
const BreadcrumbsComponent = (_a) => {
    var { as = 'nav', children, className } = _a, restProps = __rest(_a, ["as", "children", "className"]);
    const Component = as;
    const classes = (0, defaultImports_1.classNames)('ndl-breadcrumbs', className);
    return ((0, jsx_runtime_1.jsx)(Component
    /* Overridable */
    , Object.assign({ "aria-label": "breadcrumb" }, restProps, { 
        /* Non-overridable */
        className: classes, children: (0, jsx_runtime_1.jsx)("ol", { children: children }) })));
};
BreadcrumbsComponent.displayName = 'Breadcrumbs';
// Issue with TypeScript forwardRef and subcomponents: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34757#issuecomment-894053907
const Breadcrumbs = Object.assign(BreadcrumbsComponent, {
    BaseItem: BreadcrumbsBaseItem,
    GroupItem: BreadcrumbsGroupItem,
    Item: BreadcrumbsItem,
    ItemMenu: BreadcrumbsItemMenu,
    EllipsisMenu: BreadcrumbsEllipsisMenu,
    MenuItem: BreadcrumbsMenuItem,
});
exports.Breadcrumbs = Breadcrumbs;
//# sourceMappingURL=Breadcrumbs.js.map