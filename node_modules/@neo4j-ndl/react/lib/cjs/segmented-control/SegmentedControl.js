"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentedControl = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = __importStar(require("react"));
const defaultImports_1 = require("../_common/defaultImports");
const helpers_1 = require("../helpers");
const SegmentedControlContext = react_1.default.createContext(null);
const useSelectorContext = () => {
    const context = (0, react_1.useContext)(SegmentedControlContext);
    if (context === null) {
        throw new Error('SegmentedControl used without context');
    }
    return context;
};
const SegmentedControlComponent = (0, helpers_1.forwardRef)(function SegmentedControlComponent(_a, ref) {
    var { size = 'large', hasOnlyIcons = false, children, selected, onChange, as = 'div', className } = _a, restProps = __rest(_a, ["size", "hasOnlyIcons", "children", "selected", "onChange", "as", "className"]);
    const classes = (0, defaultImports_1.classNames)('ndl-segmented-control', className, {
        'ndl-small': size === 'small',
        'ndl-large': size === 'large',
    });
    const Component = as;
    return ((0, jsx_runtime_1.jsx)(Component, Object.assign({}, restProps, { className: classes, role: "group", ref: ref, children: (0, jsx_runtime_1.jsx)(SegmentedControlContext.Provider, { value: { onChange, selected, hasOnlyIcons }, children: children }) })));
});
SegmentedControlComponent.displayName = 'SegmentedControl';
const SegmentedControlItem = react_1.default.forwardRef(function SegmentedControlItem(_a, ref) {
    var { children, value, as = 'button', className } = _a, restProps = __rest(_a, ["children", "value", "as", "className"]);
    const { onChange, selected, hasOnlyIcons } = useSelectorContext();
    const isSelected = value && value === selected;
    const baseClasses = (0, defaultImports_1.classNames)(className, {
        'ndl-segment-item': !hasOnlyIcons,
        'ndl-segment-icon': hasOnlyIcons,
        'ndl-current': value && value === selected,
    });
    const Component = as;
    return ((0, jsx_runtime_1.jsx)(Component, Object.assign({}, restProps, { onClick: () => !isSelected && onChange(value), className: baseClasses, ref: ref, children: children })));
});
SegmentedControlItem.displayName = 'SegmentedControl.Item';
// Issue with TypeScript forwardRef and subcomponents: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34757#issuecomment-894053907
const SegmentedControl = Object.assign(SegmentedControlComponent, {
    Item: SegmentedControlItem,
});
exports.SegmentedControl = SegmentedControl;
//# sourceMappingURL=SegmentedControl.js.map