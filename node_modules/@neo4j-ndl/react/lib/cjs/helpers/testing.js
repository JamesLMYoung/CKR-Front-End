"use strict";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.a11yValidation = void 0;
const vitest_axe_1 = require("vitest-axe");
const axe = (0, vitest_axe_1.configureAxe)({
    runOnly: {
        type: 'tag',
        values: ['wcag2aa'],
    },
    globalOptions: {
        checks: [
            {
                // Source: https://github.com/nickcolley/jest-axe/issues/147#issuecomment-1300192415
                // color contrast checking doesnt work in a jsdom environment.
                id: 'color-contrast',
                enabled: false,
            },
        ],
    },
});
/**
 * A11y testing with Axe
 * Jest helper to the container for HTML
 * inaccessibilities
 *
 * More: https://github.com/nickcolley/jest-axe
 */
const a11yValidation = (container) => __awaiter(void 0, void 0, void 0, function* () {
    const results = yield axe(container);
    expect(results).toHaveNoViolations();
});
exports.a11yValidation = a11yValidation;
//# sourceMappingURL=testing.js.map