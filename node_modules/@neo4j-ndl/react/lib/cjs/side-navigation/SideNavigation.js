"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SideNavigation = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = require("react");
const defaultImports_1 = require("../_common/defaultImports");
const icons_1 = require("../icons");
const button_1 = require("../button");
const getExpandIconName = (position, expanded) => {
    if (expanded) {
        return position === 'left' ? ((0, jsx_runtime_1.jsx)(icons_1.CollapseExpandLeftIcon, { className: "n-w-full n-h-full" })) : ((0, jsx_runtime_1.jsx)(icons_1.CollapseExpandRightIcon, { className: "n-w-full n-h-full" }));
    }
    else {
        return position === 'left' ? ((0, jsx_runtime_1.jsx)(icons_1.CollapseExpandRightIcon, { className: "n-w-full n-h-full" })) : ((0, jsx_runtime_1.jsx)(icons_1.CollapseExpandLeftIcon, { className: "n-w-full n-h-full" }));
    }
};
const SideNavigationComponent = (0, react_1.forwardRef)(function SideNavigationComponent(_a, ref) {
    var { expanded, children, className, onExpandedChange, iconMenu = false, position = 'left' } = _a, restProps = __rest(_a, ["expanded", "children", "className", "onExpandedChange", "iconMenu", "position"]);
    const setOnExpandedChange = (0, react_1.useCallback)(() => {
        if (onExpandedChange !== undefined) {
            onExpandedChange(!expanded);
        }
    }, [expanded, onExpandedChange]);
    const classes = (0, defaultImports_1.classNames)('ndl-side-navigation', className, {
        'ndl-expanded': expanded,
        [`ndl-${position}`]: position,
    });
    const icon = getExpandIconName(position, expanded);
    return ((0, jsx_runtime_1.jsx)(SideNavigationContext.Provider, { value: { expanded, iconMenu }, children: (0, jsx_runtime_1.jsxs)("div", Object.assign({}, restProps, { className: classes, ref: ref }, (!expanded &&
            !iconMenu && {
            'aria-label': 'open-side-navigation',
            onClick: setOnExpandedChange,
        }), { children: [(0, jsx_runtime_1.jsx)("nav", { className: "ndl-side-navigation-nav", children: children }), onExpandedChange !== undefined && ((0, jsx_runtime_1.jsx)(button_1.IconButton, { className: "ndl-side-navigation-drawer-button", onClick: setOnExpandedChange, "aria-label": expanded ? 'collapse-navigation' : 'expand-navigation', size: "large", "data-testid": "ndl-side-nav-expand-btn", title: `${expanded ? 'Collapse' : 'Expand'} side navigation`, clean: true, children: icon }))] })) }));
});
SideNavigationComponent.displayName = 'SideNavigation';
const SideNavigationContext = (0, react_1.createContext)(null);
const useSideNavigationContext = () => (0, react_1.useContext)(SideNavigationContext);
const SideNavigationListContext = (0, react_1.createContext)(null);
const useSideNavigationListContext = () => (0, react_1.useContext)(SideNavigationListContext);
const SideNavigationList = (0, react_1.forwardRef)(function SideNavigationList(_a, ref) {
    var _b, _c;
    var { children, className } = _a, restProps = __rest(_a, ["children", "className"]);
    const classes = (0, defaultImports_1.classNames)('ndl-side-navigation-nav-list', className);
    const { level } = (_b = useSideNavigationListContext()) !== null && _b !== void 0 ? _b : {
        level: -1,
    };
    const { expanded, iconMenu } = (_c = useSideNavigationContext()) !== null && _c !== void 0 ? _c : {
        expanded: true,
        iconMenu: false,
    };
    if (!expanded && !iconMenu)
        return null;
    return ((0, jsx_runtime_1.jsx)(SideNavigationListContext.Provider, { value: { level: level + 1 }, children: (0, jsx_runtime_1.jsx)("ul", Object.assign({ className: classes, ref: ref }, restProps, { children: children })) }));
});
SideNavigationList.displayName = 'SideNavigation.List';
const SideNavigationItem = (0, react_1.forwardRef)(function SideNavigationItem(_a, ref) {
    var _b, _c;
    var { className, children, icon, as, selected = false, selectable = true, style = {} } = _a, restProps = __rest(_a, ["className", "children", "icon", "as", "selected", "selectable", "style"]);
    const Component = as || 'a';
    const { level } = (_b = useSideNavigationListContext()) !== null && _b !== void 0 ? _b : { level: 0 };
    const { expanded, iconMenu } = (_c = useSideNavigationContext()) !== null && _c !== void 0 ? _c : {
        expanded: true,
        iconMenu: false,
    };
    const defaultIndent = level ? 0 : 12;
    const indent = expanded ? defaultIndent + level * 32 : 0;
    const itemClasses = (0, defaultImports_1.classNames)('ndl-side-navigation-nav-item', className, {
        'ndl-expanded': expanded,
    });
    const innerClasses = (0, defaultImports_1.classNames)('ndl-side-navigation-inner-item', {
        'ndl-selected': selected,
        'ndl-selectable': selectable,
    });
    if (iconMenu && !icon) {
        throw new Error('SideNavigation is an IconMenu but icon is not defined! Set an icon on this SideNavigationItem or set `iconMenu` to false on SideNavigation');
    }
    else if (!iconMenu && icon) {
        throw new Error('SideNavigation is not an IconMenu but icon is defined! Remove the icon or set `iconMenu` to true on SideNavigation to allow icons');
    }
    if (!expanded && !(icon && iconMenu))
        return null;
    return ((0, jsx_runtime_1.jsx)("li", { className: itemClasses, children: (0, jsx_runtime_1.jsxs)(Component, Object.assign({ className: innerClasses, style: Object.assign(Object.assign({}, style), { paddingLeft: indent }), ref: ref }, restProps, { children: [iconMenu && icon && (0, jsx_runtime_1.jsx)("span", { className: "ndl-icon", children: icon }), expanded && children] })) }));
});
SideNavigationItem.displayName = 'SideNavigation.Item';
const SideNavigationGroupHeader = (0, react_1.forwardRef)(function SideNavigationGroupHeader(_a, ref) {
    var _b;
    var { children, className, as, style } = _a, restProps = __rest(_a, ["children", "className", "as", "style"]);
    const Component = as !== null && as !== void 0 ? as : 'div';
    const { expanded, iconMenu } = (_b = useSideNavigationContext()) !== null && _b !== void 0 ? _b : {
        expanded: true,
        iconMenu: false,
    };
    const classes = (0, defaultImports_1.classNames)('ndl-side-navigation-nav-item', className);
    const indent = expanded ? '12px' : '0';
    return ((0, jsx_runtime_1.jsx)("li", Object.assign({ className: classes, role: "presentation", style: Object.assign({ paddingLeft: indent }, style) }, restProps, { children: (0, jsx_runtime_1.jsxs)(Component, { className: "ndl-side-navigation-inner-item ndl-side-navigation-group-header", ref: ref, children: [!expanded && iconMenu && (0, jsx_runtime_1.jsx)(Divider, {}), expanded && children] }) })));
});
SideNavigationGroupHeader.displayName = 'SideNavigation.GroupHeader';
const Divider = () => (0, jsx_runtime_1.jsx)("div", { className: "ndl-divider" });
// Issue with TypeScript forwardRef and subcomponents: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34757#issuecomment-894053907
const SideNavigation = Object.assign(SideNavigationComponent, {
    List: SideNavigationList,
    GroupHeader: SideNavigationGroupHeader,
    Item: SideNavigationItem,
});
exports.SideNavigation = SideNavigation;
//# sourceMappingURL=SideNavigation.js.map