"use strict";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRenderCount = exports.useEffectDebugger = exports.usePrevious = exports.useEventListener = exports.useLockedBody = exports.useCopyToClipboard = exports.useMediaQuery = exports.useInterval = exports.useOnClickOutside = exports.useWindowSize = exports.useDebounce = void 0;
const react_1 = require("react");
var usehooks_ts_1 = require("usehooks-ts");
Object.defineProperty(exports, "useDebounce", { enumerable: true, get: function () { return usehooks_ts_1.useDebounce; } });
Object.defineProperty(exports, "useWindowSize", { enumerable: true, get: function () { return usehooks_ts_1.useWindowSize; } });
Object.defineProperty(exports, "useOnClickOutside", { enumerable: true, get: function () { return usehooks_ts_1.useOnClickOutside; } });
Object.defineProperty(exports, "useInterval", { enumerable: true, get: function () { return usehooks_ts_1.useInterval; } });
Object.defineProperty(exports, "useMediaQuery", { enumerable: true, get: function () { return usehooks_ts_1.useMediaQuery; } });
Object.defineProperty(exports, "useCopyToClipboard", { enumerable: true, get: function () { return usehooks_ts_1.useCopyToClipboard; } });
Object.defineProperty(exports, "useLockedBody", { enumerable: true, get: function () { return usehooks_ts_1.useLockedBody; } });
Object.defineProperty(exports, "useEventListener", { enumerable: true, get: function () { return usehooks_ts_1.useEventListener; } });
/**
 * Below are hooks that cannot be found in `usehooks-ts`
 * but are used in some projects.
 * 1. usePrevious
 * 2. useEffectDebugger
 * 3. useRenderCount
 */
/**
 * The `usePrevious` hook tracks a variable's previous value in a functional component,
 * useful for comparing current and past values to trigger actions or render changes.
 */
function usePrevious(value) {
    // The ref object is a generic container whose current property is mutable
    // and can hold any value, similar to an instance property on a class
    const ref = (0, react_1.useRef)();
    // Store current value in ref
    (0, react_1.useEffect)(() => {
        ref.current = value;
    }, [value]); // Only re-run if value changes
    // Return previous value (happens before update in useEffect above)
    return ref.current;
}
exports.usePrevious = usePrevious;
/**
 * The `useEffectDebugger` hook is a wrapper around the `useEffect` hook
 * that logs the dependencies of the effect when they change.
 *
 * Uses the `usePrevious` hook.
 *
 * Source: https://stackoverflow.com/a/59843241/3247715
 */
function useEffectDebugger(effectHook, dependencies, dependencyNames = []) {
    const previousDeps = usePrevious(dependencies);
    const changedDeps = dependencies.reduce((accum, dependency, index) => {
        if (previousDeps === undefined) {
            return accum;
        }
        if (dependency !== previousDeps[index]) {
            const keyName = dependencyNames[index] || index;
            return Object.assign(Object.assign({}, accum), { [keyName]: {
                    before: previousDeps[index],
                    after: dependency,
                } });
        }
        return accum;
    }, {});
    if (Object.keys(changedDeps).length) {
        console.info('[use-effect-debugger] ', changedDeps);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    (0, react_1.useEffect)(effectHook, dependencies);
}
exports.useEffectDebugger = useEffectDebugger;
/**
 * The `useRenderCount` hook returns the number of times a component has rendered.
 */
function useRenderCount() {
    const count = (0, react_1.useRef)(0);
    count.current++;
    return count.current;
}
exports.useRenderCount = useRenderCount;
//# sourceMappingURL=index.js.map