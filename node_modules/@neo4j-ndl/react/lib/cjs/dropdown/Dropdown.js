"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dropdown = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const react_1 = require("react");
const defaultImports_1 = require("../_common/defaultImports");
/** Different types of select components */
const creatable_1 = __importDefault(require("react-select/creatable"));
const async_1 = __importDefault(require("react-select/async"));
const helpers_1 = require("../helpers");
const utils_1 = require("../_common/utils");
const Overrides_1 = require("./Overrides");
const react_select_1 = __importDefault(require("react-select"));
/**
 *
 *
 * Helpers
 *
 *
 */
const overrideComponents = (props) => ({
    DropdownIndicator: (0, Overrides_1.DropdownIndicatorCurrying)(props),
    IndicatorSeparator: null,
    ClearIndicator: (0, Overrides_1.CustomClearIndication)(props),
    MultiValueRemove: (0, Overrides_1.CustomMultiValueRemove)(props),
    Placeholder: (0, Overrides_1.CustomPlaceholder)(props),
    Option: (0, Overrides_1.CustomOption)(props),
});
const customStyles = ({ errorText, size, }) => {
    const focusedBorderColor = errorText
        ? 'rgb(var(--theme-palette-danger-border-strong))'
        : 'rgb(var(--theme-palette-primary-focus))';
    const defaultBorder = errorText
        ? 'rgb(var(--theme-palette-danger-border-strong))'
        : 'rgb(var(--theme-palette-neutral-border-strong))';
    const OUTER_BORDER_WIDTH = (state) => (state.isFocused || errorText ? 2 : 1);
    const BORDER_WIDTH = 1;
    const SMALL_TARGET_HEIGHT = 24;
    const MEDIUM_TARGET_HEIGHT = 36;
    const LARGE_TARGET_HEIGHT = 48;
    const getTargetHeight = (size) => {
        let targetHeight = SMALL_TARGET_HEIGHT;
        if (size === 'small') {
            targetHeight = SMALL_TARGET_HEIGHT;
        }
        else if (size === 'medium') {
            targetHeight = MEDIUM_TARGET_HEIGHT;
        }
        else if (size === 'large') {
            targetHeight = LARGE_TARGET_HEIGHT;
        }
        return targetHeight;
    };
    const getFontSize = (size) => {
        if (size === 'small' || size === 'medium')
            return '14px';
        if (size === 'large')
            return '16px';
        return '16px';
    };
    const getLineHeight = (size) => {
        if (size === 'small' || size === 'medium')
            return '20px';
        if (size === 'large')
            return '24px';
        return '24px';
    };
    return {
        control: (provided, state) => (Object.assign(Object.assign({}, provided), { minHeight: getTargetHeight(size), 
            // Avoid shifting with border of 2px
            // Source: https://stackoverflow.com/a/9612782/3247715
            boxShadow: state.isFocused
                ? `0 0 0 ${OUTER_BORDER_WIDTH(state)}px ${focusedBorderColor}`
                : 'none', fontSize: getFontSize(size), lineHeight: getLineHeight(size), backgroundColor: 'rgb(var(--theme-palette-neutral-bg-weak))', outline: 'none', borderWidth: BORDER_WIDTH, borderStyle: 'solid', borderColor: state.isFocused ? focusedBorderColor : defaultBorder, '&:hover': {
                borderColor: state.isFocused ? focusedBorderColor : defaultBorder,
            } })),
        singleValue: (provided, state) => (Object.assign(Object.assign({}, provided), { color: state.isDisabled
                ? 'rgb(var(--theme-palette-neutral-text-weakest))'
                : 'rgb(var(--theme-palette-neutral-text-default))' })),
        multiValue: (provided) => (Object.assign(Object.assign({}, provided), { borderRadius: '4px', maxWidth: '95%', backgroundColor: 'rgb(var(--theme-palette-neutral-bg-strong))', color: 'rgb(var(--theme-palette-neutral-text-default))' })),
        multiValueLabel: (provided) => (Object.assign(Object.assign({}, provided), { color: 'rgb(var(--theme-palette-neutral-text-default))' })),
        multiValueRemove: (provided) => (Object.assign(Object.assign({}, provided), { '&:hover': {
                cursor: 'pointer !important',
                backgroundColor: 'rgb(var(--theme-palette-danger-hover-weak))',
            } })),
        dropdownIndicator: (provided) => (Object.assign(Object.assign({}, provided), { cursor: 'pointer', 
            // 16 is icon size
            padding: size === 'small'
                ? `${(getTargetHeight(size) - 16 - 2 * BORDER_WIDTH) / 2}px`
                : '7px' })),
        indicatorsContainer: (provided) => (Object.assign(Object.assign({}, provided), { 
            /**
             * The right icon has padding of 8px so:
             * padding-right: 8px+desired
             */
            paddingRight: size === 'small' || size === 'medium' ? '4px' : '8px' })),
        clearIndicator: (provided) => (Object.assign(Object.assign({}, provided), { 
            // 16 is icon size
            padding: size === 'small'
                ? `${(getTargetHeight(size) - 16 - 2 * BORDER_WIDTH) / 2}px`
                : '0px' })),
        /**
         * Only for multi-select, make the padding
         * 2px everywhere when we have at least one
         * value selected
         */
        valueContainer: (provided, state) => (Object.assign(Object.assign({}, provided), { padding: size === 'small'
                ? '0 8px'
                : state.isMulti && state.hasValue
                    ? '2px'
                    : '2px 8px' })),
        menu: (provided) => (Object.assign(Object.assign({}, provided), { backgroundColor: 'rgb(var(--theme-palette-neutral-bg-weak))', zIndex: 'var(--z-index-30)' })),
        menuPortal: (provided) => (Object.assign(Object.assign({}, provided), { zIndex: 'var(--z-index-30)' })),
        menuList: (provided) => (Object.assign(Object.assign({}, provided), { cursor: 'auto !important', padding: '8px' })),
        option: (provided, state) => {
            let backgroundColor;
            let color;
            switch (true) {
                case state.isSelected:
                    backgroundColor = 'rgb(var(--theme-palette-primary-bg-selected))';
                    break;
                case state.isFocused && !state.isSelected && !state.isDisabled:
                    backgroundColor = 'rgb(var(--theme-palette-neutral-hover))';
                    break;
                default:
                    backgroundColor = 'transparent';
            }
            switch (true) {
                case state.isDisabled:
                    color = 'rgb(var(--theme-palette-neutral-text-weakest))';
                    break;
                case state.isSelected:
                    color = 'rgb(var(--theme-palette-primary-text))';
                    break;
                default:
                    color = 'rgb(var(--theme-palette-neutral-text-default))';
            }
            return Object.assign(Object.assign(Object.assign(Object.assign({}, provided), { position: 'relative', borderRadius: '8px', marginBottom: '2px', cursor: state.isDisabled
                    ? 'not-allowed !important'
                    : 'pointer !important', 
                /** Pass undefined to allow CSS rules to apply */
                fontSize: undefined, lineHeight: undefined, backgroundColor: backgroundColor, color: color, '&:hover': {
                    backgroundColor: backgroundColor,
                } }), (state.isSelected && {
                '&::before': {
                    content: '""',
                    position: 'absolute',
                    width: '4px',
                    height: '100%',
                    backgroundColor: 'rgb(var(--theme-palette-primary-bg-strong))',
                    borderRadius: '0 100px 100px 0',
                    left: '-8px',
                    top: '0px',
                },
            })), { overflowWrap: 'break-word' });
        },
        input: (provided) => (Object.assign(Object.assign({}, provided), { padding: size === 'small' ? '0px' : undefined, margin: size === 'small' ? '0px' : undefined, lineHeight: getLineHeight(size), height: size === 'small'
                ? `${getTargetHeight(size) - 2 * BORDER_WIDTH}px`
                : undefined, color: 'rgb(var(--theme-palette-neutral-text-default))' })),
        placeholder: (provided) => (Object.assign(Object.assign({}, provided), { height: size === 'small'
                ? `${getTargetHeight(size) - 2 * BORDER_WIDTH}px`
                : undefined, color: 'rgb(var(--theme-palette-neutral-text-weaker))' })),
    };
};
exports.Dropdown = (0, helpers_1.forwardRef)(function Dropdown(props, ref) {
    const { as, label, helpText, errorText, fluid = true, size = 'small', type = 'select', 'aria-label': ariaLabel, selectProps = {} } = props, rest = __rest(props, ["as", "label", "helpText", "errorText", "fluid", "size", "type", 'aria-label', "selectProps"]);
    const Component = as || 'div';
    const ComponentOverrides = (0, react_1.useMemo)(() => overrideComponents({ errorText, size }), [errorText, size]);
    const StyleOverrides = (0, react_1.useMemo)(() => customStyles({ errorText, size }), [errorText, size]);
    const identifier = (0, react_1.useMemo)(() => {
        if (typeof label === 'string')
            return label;
        if (ariaLabel)
            return ariaLabel;
        (0, utils_1.needleWarningMessage)('Consider adding an aria-label to make the select more accessible');
        // 7 char long pseudo-random string
        return Math.random().toString(36).slice(2, 9);
    }, [label, ariaLabel]);
    let SelectElement;
    switch (type) {
        case 'async': {
            SelectElement = ((0, jsx_runtime_1.jsx)(async_1.default, Object.assign({ name: identifier, inputId: identifier }, selectProps, { styles: Object.assign(Object.assign({}, StyleOverrides), selectProps.styles), components: Object.assign(Object.assign({}, ComponentOverrides), selectProps.components) })));
            break;
        }
        case 'creatable':
            SelectElement = ((0, jsx_runtime_1.jsx)(creatable_1.default, Object.assign({ name: identifier, inputId: identifier }, selectProps, { styles: Object.assign(Object.assign({}, StyleOverrides), selectProps.styles), components: Object.assign(Object.assign({}, ComponentOverrides), selectProps.components) })));
            break;
        default:
            SelectElement = ((0, jsx_runtime_1.jsx)(react_select_1.default, Object.assign({ name: identifier, inputId: identifier }, selectProps, { styles: Object.assign(Object.assign({}, StyleOverrides), selectProps.styles), components: Object.assign(Object.assign({}, ComponentOverrides), selectProps.components) })));
    }
    const classes = (0, defaultImports_1.classNames)('ndl-dropdown', props.className, {
        'ndl-small': size === 'small',
        'ndl-large': size === 'large',
        'ndl-fluid': fluid,
        'ndl-disabled': selectProps.isDisabled,
        'ndl-multi': selectProps.isMulti,
        'ndl-creatable': type === 'creatable',
    });
    return ((0, jsx_runtime_1.jsxs)(Component, Object.assign({}, rest, { "aria-label": ariaLabel, ref: ref, className: classes, children: [label && (0, jsx_runtime_1.jsx)("label", { htmlFor: identifier, children: label }), SelectElement, helpText && !errorText && ((0, jsx_runtime_1.jsx)("span", { className: "ndl-sub-text", children: helpText })), errorText && ((0, jsx_runtime_1.jsx)("span", { className: "ndl-sub-text ndl-error-text", children: errorText }))] })));
});
//# sourceMappingURL=Dropdown.js.map