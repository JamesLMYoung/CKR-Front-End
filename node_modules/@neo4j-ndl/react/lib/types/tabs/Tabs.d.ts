/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React from 'react';
import { type ElementBase } from '../helpers';
type TabId = string | number;
type Size = 'small' | 'large';
type Fill = 'underline' | 'filled';
export interface BaseTabsProps<T extends TabId> {
    /**
     * The currently active tabId
     */
    value: T;
    /**
     * Event when a new tab is selected. Receives the newly selected
     * tabId as the value
     */
    onChange: (e: T) => void;
    children: React.ReactNode | string;
    fill?: Fill;
    size?: Size;
    className?: string;
    /**
     * Replace the component rendered to wrap the tabs
     */
    as?: string | React.ComponentType<any>;
}
interface TabProps<T extends TabId> extends ElementBase<HTMLButtonElement> {
    tabId: T;
    children: React.ReactNode | string;
    className?: string;
    disabled?: boolean;
    /**
     * Replace the component rendered as the tab
     */
    as?: string | React.ComponentType<any>;
}
interface TabPanelProps {
    children: React.ReactNode | string;
    /**
     * The currently selected tabId. Determines if
     * this tab is visible or not
     */
    value: TabId;
    tabId: TabId;
    className?: string;
    /**
     * Replace the component rendered as the tab panel
     */
    as?: string | React.ComponentType<any>;
}
declare const Tabs: (<T extends TabId>(props: BaseTabsProps<T> & React.RefAttributes<unknown>) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null) & {
    Tab: <T_1 extends TabId = TabId>(props: TabProps<T_1> & React.RefAttributes<unknown>) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
    TabPanel: React.ForwardRefExoticComponent<TabPanelProps & React.RefAttributes<unknown>>;
};
export { Tabs };
