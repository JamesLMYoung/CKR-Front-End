/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference types="react" />
import { type ElementBase } from '../helpers';
import type { RowData, Table as DataGridType } from '@tanstack/react-table';
import { type DataGridComponentsInterface } from './DataGridContext';
export declare const DataGridComponents: {
    ResizingBar: <T extends unknown>({ header, children, innerProps, }: import("./Components").ResizingBarProps<T>) => import("react/jsx-runtime").JSX.Element;
    Header: ({ children, innerProps }: import("./Components").CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
    Body: ({ children, innerProps }: import("./Components").CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
    BodyCell: <T_1 extends unknown>({ cell, children, innerProps, }: import("./Components").BodyCellProps<T_1>) => import("react/jsx-runtime").JSX.Element;
    BodyRow: <T_2 extends unknown>({ row, children, innerProps, }: import("./Components").BodyRowProps<T_2>) => import("react/jsx-runtime").JSX.Element;
    HeaderCell: <T_3 extends unknown>({ cell, children, innerProps, }: import("./Components").HeaderCellProps<T_3>) => import("react/jsx-runtime").JSX.Element;
    ActionButton: ({ action, children, onClose, innerProps, }: import("./Components").ActionButtonProps) => import("react/jsx-runtime").JSX.Element;
    ColumnControls: <T_4 extends unknown>({ cell, children, innerProps, }: import("./Components").ColumnControlsProps<T_4>) => import("react/jsx-runtime").JSX.Element | null;
    Navigation: ({ children, innerProps, }: import("./Components").CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
    TableResults: ({ children, innerProps, manualPagination, }: import("./Components").TableResultProps) => import("react/jsx-runtime").JSX.Element;
    RowsPerPage: ({ children, innerProps, }: import("./Components").CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
    Pagination: ({ children, innerProps, }: import("./Components").CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
    PaginationNumericButtons: () => import("react/jsx-runtime").JSX.Element;
    PaginationNumericButton: ({ currentIndex, isSelected, children, innerProps, }: import("./Components").PaginationNumericButtonProps) => import("react/jsx-runtime").JSX.Element;
    PaginationArrowButton: ({ action, children, innerProps, }: import("./Components").PaginationArrowButtonProps) => import("react/jsx-runtime").JSX.Element;
    LoadingPlaceholder: ({ children, innerProps, }: import("./Components").CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
    NoDataPlaceholder: ({ children, innerProps, }: import("./Components").CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
    Scrollable: ({ children, innerProps }: import("./Components").CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
};
declare enum BorderStyleEnum {
    AllSides = "all-sides",
    Horizontal = "horizontal",
    None = "none"
}
export type BorderStyle = `${BorderStyleEnum}`;
declare enum HeaderStyleEnum {
    Filled = "filled",
    Clean = "clean"
}
export type HeaderStyle = `${HeaderStyleEnum}`;
export type DataGridProps<T extends RowData> = {
    styling?: Partial<{
        /** Alternate the background colour of rows */
        zebraStriping: boolean;
        /** Type of border that will be used */
        borderStyle: BorderStyle;
        /** If header should have styles or not (Aura example) */
        headerStyle: HeaderStyle;
    }>;
    /** Resizing the width of columns */
    isResizable?: boolean;
    /** Enables table's loading state */
    isLoading?: boolean;
    /**
     * Enables keyboard navigation.
     * To control keyboard navigation programmatically
     * for edge cases, pass a `ref` to `tableNavRef`
     * @see {@link https://github.com/konsalex/table-nav }
     */
    isKeyboardNavigable?: boolean;
    /**
     * Enables automatic resizing of columns
     * on initial render of the table.
     * To achieve this, columns are using `flex-grow`,
     * to automatically adjust to the available width,
     * and then the `flex-grow` property is disabled.
     *
     * @defaultValue true
     * @see {@link https://github.com/neo4j/neo4j-design/blob/main/packages/react/src/data-grid/Components.tsx#L430-L438}
     */
    isAutoResizingColumns?: boolean;
    /**
     * Reference to the tableNav instance
     * for programmatic control
     * @see {@link https://github.com/konsalex/table-nav }
     */
    tableNavRef?: React.RefObject<any>;
    /** Table instance created from `useTable`*/
    tableInstance: DataGridType<T>;
    /** Table sub-component overrides */
    components?: DataGridComponentsInterface<T>;
    /** Root `div` props */
    rootProps?: ElementBase<HTMLDivElement>;
};
declare const DataGrid: <T extends unknown>(props: DataGridProps<T> & import("react").RefAttributes<HTMLDivElement>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | null;
export default DataGrid;
