/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { type ComponentPropsWithoutRef, type ElementType } from 'react';
export type ElementBase<T = HTMLElement> = Omit<React.HTMLProps<T>, 'as' | 'selected' | 'size' | 'onChange' | 'ref'> & {
    /** Override the root element rendered for the component */
    as?: string | React.ComponentType<any>;
};
/**
 * This type resolves complaining TypeScript issues
 * with arbitrary `data-*` properties when we
 * surface component properties in object type
 * Sources:
 * 1. https://github.com/neo4j/neo4j-ops-manager/pull/787#discussion_r1332971991
 * 2. https://github.com/microsoft/TypeScript/issues/28960#issuecomment-903519759
 */
type DataAttributeKey = `data-${string}`;
export type ComponentPropsWithoutRefAsObj<T extends ElementType> = ComponentPropsWithoutRef<T> & {
    [dataAttribute: DataAttributeKey]: any;
};
export {};
