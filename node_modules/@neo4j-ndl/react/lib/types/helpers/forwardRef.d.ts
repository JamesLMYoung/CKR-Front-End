/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { type ForwardedRef, type ReactElement, type RefAttributes } from 'react';
type ForwardRefType = <T, P = Record<string, never>>(render: (props: P, ref: ForwardedRef<T>) => ReactElement | null) => (props: P & RefAttributes<T>) => ReactElement | null;
export declare const forwardRef: ForwardRefType;
/**
 * This type is to help retain the ForwardRefExoticComponent properties
 * on a component when using our own custom  generic forwardRef function.
 * This type can be removed when our custom generic forwardRef is removed.
 */
export type RetainForwardRefProps<T> = React.ForwardRefExoticComponent<T & React.RefAttributes<unknown>>;
export {};
