/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React from 'react';
import { type ElementBase } from '../helpers';
type SideNavigationPosition = 'left' | 'right';
interface SideNavigationProps extends ElementBase<HTMLDivElement> {
    /** True if the menu is expanded. */
    expanded: boolean;
    /** What to do on expanded change. */
    onExpandedChange?: (expanded: boolean) => void;
    /** True if icons will be used in the menu. */
    iconMenu?: boolean;
    /** Position. */
    position?: SideNavigationPosition;
}
export type SideNavigationListProps = ElementBase<HTMLUListElement>;
export interface SideNavigationItemProps extends ElementBase<HTMLAnchorElement> {
    icon?: React.ReactNode;
    children?: React.ReactNode;
    selected?: boolean;
    /** Flag to indicate if the side navigation item can be selected or not */
    selectable?: boolean;
}
export type SideNavigationGroupHeaderProps = ElementBase<HTMLLIElement>;
declare const SideNavigation: React.ForwardRefExoticComponent<SideNavigationProps & React.RefAttributes<HTMLDivElement>> & {
    List: React.ForwardRefExoticComponent<Omit<React.HTMLProps<HTMLUListElement>, "as" | "selected" | "size" | "onChange" | "ref"> & {
        as?: string | React.ComponentType<any> | undefined;
    } & React.RefAttributes<HTMLUListElement>>;
    GroupHeader: React.ForwardRefExoticComponent<Omit<React.HTMLProps<HTMLLIElement>, "as" | "selected" | "size" | "onChange" | "ref"> & {
        as?: string | React.ComponentType<any> | undefined;
    } & React.RefAttributes<HTMLParagraphElement>>;
    Item: React.ForwardRefExoticComponent<SideNavigationItemProps & React.RefAttributes<any>>;
};
export { SideNavigation };
