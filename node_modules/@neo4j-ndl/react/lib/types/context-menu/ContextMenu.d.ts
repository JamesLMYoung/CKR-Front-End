/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React from 'react';
import { type PopoverProps } from '../popover';
/**
 * A modified version of the Material UI (@mui/material) Menu component.
 * We use a modified/slimmed version for easier maintenance.
 *
 * See the LICENSES.txt file for license for @mui/material
 */
type ElementBase = Omit<React.HTMLProps<HTMLElement>, 'as'> & {
    /** Override the root element rendered for the component */
    as?: string | React.ComponentType<any>;
};
export interface ContextMenuProps extends PopoverProps {
    /**
     * @deprecated
     * size property is deprecated and will be removed in v3.
     * Only one variant, `small` , will be used in products.
     */
    size?: 'small' | 'large';
    /** The minimum width of the menu */
    minWidth?: number;
    /** The nested level of the menu. Internal prop provided when nesting menu elements */
    level?: number;
    /** Whether the menu is nested. Internal prop provided when nesting menu elements */
    nested?: boolean;
}
export interface MenuItemsProps extends ElementBase {
    children: React.ReactNode | string;
    /** Additional classes */
    className?: string;
}
export interface StandardMenuItemProps extends Omit<ElementBase, 'title' | 'onClick' | 'children'> {
    /** Item title text */
    title: string | React.ReactNode;
    /** Item description text */
    description?: string | React.ReactNode;
    /** An icon to render on the left side of the list item */
    icon?: React.ReactNode;
    /** Additional classes */
    className?: string;
    /** Disable this menu item */
    disabled?: boolean;
    /** Show arrow icon to indicate nesting */
    nested?: boolean;
    /** Experimental: use safe areas to allow diagonal move in nested menus - Defaults: true **/
    safeArea?: boolean;
    onClick?: (e: React.MouseEvent<HTMLElement, MouseEvent> | React.KeyboardEvent<HTMLElement>) => void;
    /** Enforces no children on standard menu item. Overridden by nested menu item*/
    children?: never;
}
export type MenuItemProps = StandardMenuItemProps | NestedMenuItemProps;
declare const StandardMenuItem: React.ForwardRefExoticComponent<Omit<StandardMenuItemProps, "ref"> & React.RefAttributes<unknown>>;
export interface MenuHeaderProps extends Omit<ElementBase, 'title'> {
    /** Header title text */
    title: string | React.ReactNode;
    /** Header description text */
    description?: string | React.ReactNode;
    /** Additional classes */
    className?: string;
}
export type NestedMenuItemProps = Omit<React.ComponentProps<typeof StandardMenuItem>, 'children'> & {
    children: ({ nestedMenuProps, }: {
        nestedMenuProps: Pick<React.ComponentProps<typeof Menu>, 'className' | 'open' | 'anchorEl' | 'onClose' | 'onMouseLeave' | 'onKeyDown' | 'nested'>;
    }) => JSX.Element;
};
declare const Menu: React.ForwardRefExoticComponent<Omit<ContextMenuProps, "ref"> & React.RefAttributes<unknown>> & {
    Divider: {
        (): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Subheader: {
        (props: {
            title: string;
        }): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Header: React.ForwardRefExoticComponent<Omit<MenuHeaderProps, "ref"> & React.RefAttributes<unknown>>;
    Item: React.ForwardRefExoticComponent<(Omit<StandardMenuItemProps, "ref"> | Omit<NestedMenuItemProps, "ref">) & React.RefAttributes<unknown>>;
    Items: React.ForwardRefExoticComponent<Omit<MenuItemsProps, "ref"> & React.RefAttributes<unknown>>;
};
export { Menu };
