/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React from 'react';
import { type ElementBase as _ElementBase } from '../helpers';
import { type ModalProps } from '../modal';
export interface DialogBaseProps extends _ElementBase {
    className?: string;
    children: React.ReactNode;
}
export declare enum DialogCloseReason {
    BACKDROP_CLICK = "backdropClick",
    ESCAPE_KEY_DOWN = "escapeKeyDown",
    CLOSE_BUTTON_CLICK = "closeButtonClick"
}
export type DialogType = 'info' | 'success' | 'warning' | 'danger';
export interface DialogProps extends Omit<ModalProps, 'onClose'> {
    open: boolean;
    type?: DialogType;
    disableCloseButton?: boolean;
    onClose?: (e: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, reason?: DialogCloseReason) => void;
}
export declare const Dialog: {
    ({ open, onClose, children, type, size, disableCloseButton, ...restProps }: DialogProps): import("react/jsx-runtime").JSX.Element | null;
    Actions: ({ children, className, ...rest }: DialogActionsProps) => import("react/jsx-runtime").JSX.Element;
    Header: ({ children, className, ...rest }: DialogHeaderProps) => import("react/jsx-runtime").JSX.Element;
    Subtitle: ({ children, className, ...rest }: DialogSubtitleProps) => import("react/jsx-runtime").JSX.Element;
    Description: ({ children, className, ...rest }: DialogDescriptionProps) => import("react/jsx-runtime").JSX.Element;
    Content: ({ children, className, ...rest }: DialogContentProps) => import("react/jsx-runtime").JSX.Element;
};
type DialogActionsProps = DialogBaseProps;
type DialogHeaderProps = Omit<DialogBaseProps, 'children'> & {
    children?: React.ReactNode;
};
type DialogSubtitleProps = DialogBaseProps;
type DialogDescriptionProps = DialogBaseProps;
type DialogContentProps = DialogBaseProps;
export {};
