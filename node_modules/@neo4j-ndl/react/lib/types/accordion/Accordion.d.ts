/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React from 'react';
import { type ElementBase } from '../helpers';
export type AccordionItemId = string | number | undefined;
export interface AccordionBase extends ElementBase<HTMLDivElement> {
    children: React.ReactNode | string;
    className?: string;
    as?: string | React.ComponentType<any>;
}
interface IsNotMultiple<T extends AccordionItemId> {
    multiple: false | undefined;
    expandedItemId: T | null;
    onChange: (expandedItemId: T | null) => void;
}
interface IsMultiple<T extends AccordionItemId> {
    multiple: true;
    expandedItemIds: T[];
    onChange: (expandedItemIds: T[]) => void;
}
type AccordionIsMultiple<T extends AccordionItemId> = AccordionBase & IsMultiple<T>;
type AccordionIsNotMultiple<T extends AccordionItemId> = AccordionBase & IsNotMultiple<T>;
export type AccordionProps<T extends AccordionItemId> = AccordionIsMultiple<T> | AccordionIsNotMultiple<T>;
export type AccordionArrowPosition = 'left' | 'right';
export interface AccordionItemProps<T extends AccordionItemId> extends ElementBase<HTMLDivElement> {
    /** The component item id. */
    itemId: T;
    /** The title. */
    title: string;
    /** Callback function on component item expand/collapse change. */
    onExpandedChange?: (expanded: boolean) => void;
    /** Which side the accordion arrow will appear. */
    arrowPosition?: AccordionArrowPosition;
    /** If the component item is disabled. */
    disabled?: boolean;
}
declare const Accordion: (<T extends AccordionItemId>(props: AccordionProps<T> & React.RefAttributes<unknown>) => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null) & {
    Item: {
        <T_1 extends AccordionItemId>({ itemId, children, title, className, arrowPosition, disabled, onExpandedChange, ...restProps }: AccordionItemProps<T_1>): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
};
export { Accordion };
