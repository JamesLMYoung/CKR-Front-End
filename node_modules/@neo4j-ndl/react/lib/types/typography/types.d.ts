/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference types="react" />
import { type tokens } from '@neo4j-ndl/base';
export type TypographyVariants = keyof typeof tokens.font.size;
export declare const TypographyDefaultMapping: {
    [key in TypographyVariants]: React.ElementType;
};
type Tags = keyof HTMLElementTagNameMap;
type VariantsDefaultType<T extends TypographyVariants> = Omit<React.ComponentPropsWithoutRef<(typeof TypographyDefaultMapping)[T]>, 'as'> & {
    variant: TypographyVariants;
};
export type ReactComponent = (args: any) => JSX.Element;
export type AsType = undefined | Tags | React.FunctionComponent<any>;
export type ConditionalTypography<T extends AsType, V extends TypographyVariants> = T extends undefined ? VariantsDefaultType<V> : T extends Tags ? React.ComponentPropsWithoutRef<T> : T extends ReactComponent ? React.ComponentProps<T> : never;
export {};
