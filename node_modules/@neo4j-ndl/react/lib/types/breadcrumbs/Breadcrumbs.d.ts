/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { type ContextMenuProps } from '../context-menu';
import React from 'react';
export interface BreadcrumbsBaseItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'as' | 'onClick'> {
    as?: string | React.ComponentType<any>;
    children?: React.ReactNode;
    className?: string;
    href: string;
    isCurrentPage?: boolean;
    onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>, href: string) => void;
}
export interface BreadcrumbsGroupItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'as'> {
    as?: string | React.ComponentType<any>;
    children?: React.ReactNode;
    className?: string;
}
export interface BreadcrumbsItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'as' | 'onClick'> {
    as?: string | React.ComponentType<any>;
    children: React.ReactNode;
    className?: string;
    hasSeparator?: boolean;
    href: string;
    isCurrentPage?: boolean;
    onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>, href: string) => void;
}
export interface BreadcrumbsItemMenuProps extends Omit<ContextMenuProps, 'open'> {
    children: React.ReactNode;
    className?: string;
    isOpen?: boolean;
    onClick?: (event: React.MouseEvent<HTMLElement> | undefined) => void;
    onClose?: (event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;
}
export interface BreadcrumbsEllipsisMenuProps extends Omit<ContextMenuProps, 'open'> {
    isOpen?: boolean;
    onClose?: (event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;
}
export interface BreadcrumbsMenuItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'as' | 'onClick'> {
    as?: string | React.ComponentType<any>;
    children: React.ReactNode;
    className?: string;
    href?: string;
    isCurrentPage?: boolean;
    onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>, href?: string) => void;
}
export interface BreadcrumbsProps {
    as?: string | React.ComponentType<any>;
    children?: React.ReactNode;
    className?: string;
}
declare const Breadcrumbs: {
    ({ as, children, className, ...restProps }: BreadcrumbsProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
} & {
    BaseItem: {
        ({ as, children, className, href, isCurrentPage, onClick, ...restProps }: BreadcrumbsBaseItemProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    GroupItem: {
        ({ as, children, className, ...restProps }: BreadcrumbsGroupItemProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Item: {
        ({ as, children, className, hasSeparator, href, isCurrentPage, onClick, ...restProps }: BreadcrumbsItemProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    ItemMenu: {
        ({ children, className, isOpen, onClick, onClose, ...restProps }: BreadcrumbsItemMenuProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    EllipsisMenu: {
        ({ as, children, className, isOpen, onClick, onClose, onKeyDown, ...restProps }: BreadcrumbsEllipsisMenuProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    MenuItem: {
        ({ as, children, className, href, isCurrentPage, onClick, ...restProps }: BreadcrumbsMenuItemProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
};
export { Breadcrumbs };
