/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/// <reference types="react" />
import { type RowData, type Row, type Cell, type Header as HeaderType } from '@tanstack/react-table';
import { type ElementBase } from '../helpers';
import { type SortingColumn } from '@tanstack/table-core';
export interface CommonInnerProps<T = HTMLDivElement> {
    /** Children are surfaced to allow easy overriding */
    children?: React.ReactNode;
    innerProps?: ElementBase<T>;
}
export interface ResizingBarProps<T extends RowData> extends CommonInnerProps<HTMLButtonElement> {
    header: HeaderType<T, unknown>;
}
declare const ResizingBar: <T extends unknown>({ header, children, innerProps, }: ResizingBarProps<T>) => import("react/jsx-runtime").JSX.Element;
declare const Scrollable: ({ children, innerProps }: CommonInnerProps) => import("react/jsx-runtime").JSX.Element;
declare const Header: ({ children, innerProps }: CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
export interface SortingButtonProps {
    sortDirection: ReturnType<SortingColumn<any>['getIsSorted']>;
    children?: React.ReactNode;
    innerProps?: React.ComponentProps<'svg'>;
}
export declare const SortingButton: ({ sortDirection, children, innerProps, }: SortingButtonProps) => import("react/jsx-runtime").JSX.Element;
export interface ColumnControlsProps<T extends RowData> extends CommonInnerProps<HTMLDivElement> {
    cell: HeaderType<T, unknown>;
    controls: Array<React.ReactNode>;
}
export declare const ColumnControls: <T extends unknown>({ cell, controls, children, innerProps, }: ColumnControlsProps<T>) => import("react/jsx-runtime").JSX.Element;
export interface HeaderCellProps<T> extends CommonInnerProps<HTMLDivElement> {
    cell: HeaderType<T, unknown>;
}
declare const HeaderCell: <T extends unknown>({ cell, children, innerProps, }: HeaderCellProps<T>) => import("react/jsx-runtime").JSX.Element;
declare const Body: ({ children, innerProps }: CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
export interface BodyCellProps<T extends RowData> extends CommonInnerProps<HTMLDivElement> {
    cell: Cell<T, unknown>;
}
declare const BodyCell: <T extends unknown>({ cell, children, innerProps, }: BodyCellProps<T>) => import("react/jsx-runtime").JSX.Element;
export interface BodyRowProps<T extends RowData> extends CommonInnerProps<HTMLDivElement> {
    row: Row<T>;
}
declare const BodyRow: <T extends unknown>({ row, children, innerProps, }: BodyRowProps<T>) => import("react/jsx-runtime").JSX.Element;
export interface TableResultProps extends CommonInnerProps<HTMLSpanElement> {
    manualPagination?: {
        from: number;
        to: number;
        totalRows: number;
    };
}
declare const TableResults: ({ children, innerProps, manualPagination, }: TableResultProps) => import("react/jsx-runtime").JSX.Element;
declare const RowsPerPage: ({ children, innerProps, }: CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
export interface PaginationArrowButtonProps extends CommonInnerProps<HTMLButtonElement> {
    action: 'previous' | 'next';
}
declare const PaginationArrowButton: ({ action, children, innerProps, }: PaginationArrowButtonProps) => import("react/jsx-runtime").JSX.Element;
export interface PaginationNumericButtonProps extends CommonInnerProps<HTMLButtonElement> {
    currentIndex: number | string;
    isSelected: boolean;
}
declare const PaginationNumericButton: ({ currentIndex, isSelected, children, innerProps, }: PaginationNumericButtonProps) => import("react/jsx-runtime").JSX.Element;
declare const PaginationNumericButtons: () => import("react/jsx-runtime").JSX.Element;
declare const Pagination: ({ children, innerProps, }: CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
declare const Navigation: ({ children, innerProps, }: CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
declare const LoadingPlaceholder: ({ children, innerProps, }: CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
declare const NoDataPlaceholder: ({ children, innerProps, }: CommonInnerProps<HTMLDivElement>) => import("react/jsx-runtime").JSX.Element;
export { ResizingBar, Header, Body, BodyCell, BodyRow, HeaderCell, Navigation, TableResults, RowsPerPage, Pagination, PaginationNumericButtons, PaginationArrowButton, PaginationNumericButton, NoDataPlaceholder, LoadingPlaceholder, Scrollable, };
