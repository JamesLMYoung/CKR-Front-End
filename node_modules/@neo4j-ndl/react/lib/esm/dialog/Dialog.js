var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { useContext } from 'react';
import { classNames } from '../_common/defaultImports';
import { CheckCircleIconOutline, ExclamationCircleIconOutline, ExclamationTriangleIconOutline, InformationCircleIconOutline, XMarkIconOutline, } from '../icons';
import { IconButton } from '../button';
import { Modal } from '../modal';
// Should extend ModalCloseReason
export var DialogCloseReason;
(function (DialogCloseReason) {
    DialogCloseReason["BACKDROP_CLICK"] = "backdropClick";
    DialogCloseReason["ESCAPE_KEY_DOWN"] = "escapeKeyDown";
    DialogCloseReason["CLOSE_BUTTON_CLICK"] = "closeButtonClick";
})(DialogCloseReason || (DialogCloseReason = {}));
const DialogContext = React.createContext(null);
const useDialogContext = () => {
    const value = useContext(DialogContext);
    if (!value) {
        throw new Error('Accessing `useDialogContext` outside of the context provider');
    }
    return value;
};
const convertCloseReason = (reason) => {
    const dialogReason = reason;
    if (Object.values(DialogCloseReason).includes(dialogReason)) {
        return dialogReason;
    }
    throw new Error(`Unknown reason '${reason}' received from popup`);
};
const typeIcons = {
    warning: _jsx(ExclamationTriangleIconOutline, { strokeWidth: "0.8" }),
    danger: _jsx(ExclamationCircleIconOutline, { strokeWidth: "0.8" }),
    info: _jsx(InformationCircleIconOutline, { strokeWidth: "0.8" }),
    success: _jsx(CheckCircleIconOutline, { strokeWidth: "0.8" }),
};
export const Dialog = (_a) => {
    var _b;
    var { open, onClose, children, type, size, disableCloseButton = false } = _a, restProps = __rest(_a, ["open", "onClose", "children", "type", "size", "disableCloseButton"]);
    const handleCloseClick = (e) => {
        e.preventDefault();
        onClose && onClose(e, DialogCloseReason.CLOSE_BUTTON_CLICK);
    };
    const handleClose = (e, reason) => {
        onClose && onClose(e, reason ? convertCloseReason(reason) : undefined);
    };
    if (!open) {
        return null;
    }
    const classes = classNames('ndl-dialog', (_b = restProps.modalProps) === null || _b === void 0 ? void 0 : _b.className, {
        'ndl-with-icon': !!type,
        'ndl-with-close-button': !disableCloseButton,
    });
    const contentWrapperClasses = classNames('n-flex n-flex-nowrap', {
        'n-mt-10': !!type,
    });
    return (_jsx(Modal, Object.assign({}, restProps, { open: open, onClose: handleClose, modalProps: Object.assign(Object.assign({}, ((restProps === null || restProps === void 0 ? void 0 : restProps.modalProps) || {})), { className: classes, role: 'dialog' }), size: size, children: _jsxs(DialogContext.Provider, { value: { type }, children: [!disableCloseButton && (_jsx(IconButton, { clean: true, size: "large", className: "ndl-dialog-close", onClick: handleCloseClick, role: "button", "data-testid": "ndl-dialog-close", "aria-label": "close", children: _jsx(XMarkIconOutline, {}) })), _jsxs("div", { className: contentWrapperClasses, children: [type && (_jsx("div", { className: `ndl-dialog-type-icon ndl-${type}`, "data-testid": "ndl-dialog-type-icon", children: typeIcons[type] })), _jsx("div", { className: "n-flex n-flex-col n-flex-1 n-w-full", children: children })] })] }) })));
};
const Actions = (_a) => {
    var { children, className = '' } = _a, rest = __rest(_a, ["children", "className"]);
    const { type } = useDialogContext();
    const classes = classNames('ndl-dialog-actions', className);
    let childrenToRender = children;
    // For danger dialogs, we want to convert primary buttons to danger buttons by default
    if (type === 'danger') {
        childrenToRender = React.Children.map(children, (element) => {
            if (!React.isValidElement(element))
                return;
            const { color } = element.props;
            if (!color || color === 'primary') {
                return React.cloneElement(element, Object.assign(Object.assign({}, element.props), { color: 'danger' }));
            }
            return element;
        });
    }
    return (_jsx("div", Object.assign({}, rest, { className: classes, children: childrenToRender })));
};
Dialog.Actions = Actions;
const Header = (_a) => {
    var { children, className = '' } = _a, rest = __rest(_a, ["children", "className"]);
    const classes = classNames('ndl-dialog-header', className);
    return (_jsx("h4", Object.assign({}, rest, { className: classes, children: children })));
};
Dialog.Header = Header;
const Subtitle = (_a) => {
    var { children, className } = _a, rest = __rest(_a, ["children", "className"]);
    const classes = classNames('ndl-dialog-subtitle n-body-large', className);
    return (_jsx("div", Object.assign({}, rest, { className: classes, children: children })));
};
Dialog.Subtitle = Subtitle;
const Description = (_a) => {
    var { children, className = '' } = _a, rest = __rest(_a, ["children", "className"]);
    const classes = classNames('ndl-dialog-description n-body-medium', className);
    return (_jsx("div", Object.assign({}, rest, { className: classes, children: children })));
};
Dialog.Description = Description;
const Content = (_a) => {
    var { children, className = '' } = _a, rest = __rest(_a, ["children", "className"]);
    const classes = classNames('ndl-dialog-content', className);
    return (_jsx("div", Object.assign({}, rest, { className: classes, children: children })));
};
Dialog.Content = Content;
//# sourceMappingURL=Dialog.js.map