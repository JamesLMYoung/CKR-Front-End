var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { useContext } from 'react';
import { classNames } from '../_common/defaultImports';
import { forwardRef, } from '../helpers';
const SegmentedControlContext = React.createContext(null);
const useSelectorContext = () => {
    const context = useContext(SegmentedControlContext);
    if (context === null) {
        throw new Error('SegmentedControl used without context');
    }
    return context;
};
const SegmentedControlComponent = forwardRef(function SegmentedControlComponent(_a, ref) {
    var { size = 'large', hasOnlyIcons = false, children, selected, onChange, as = 'div', className } = _a, restProps = __rest(_a, ["size", "hasOnlyIcons", "children", "selected", "onChange", "as", "className"]);
    const classes = classNames('ndl-segmented-control', className, {
        'ndl-small': size === 'small',
        'ndl-large': size === 'large',
    });
    const Component = as;
    return (_jsx(Component, Object.assign({}, restProps, { className: classes, role: "group", ref: ref, children: _jsx(SegmentedControlContext.Provider, { value: { onChange, selected, hasOnlyIcons }, children: children }) })));
});
SegmentedControlComponent.displayName = 'SegmentedControl';
const SegmentedControlItem = React.forwardRef(function SegmentedControlItem(_a, ref) {
    var { children, value, as = 'button', className } = _a, restProps = __rest(_a, ["children", "value", "as", "className"]);
    const { onChange, selected, hasOnlyIcons } = useSelectorContext();
    const isSelected = value && value === selected;
    const baseClasses = classNames(className, {
        'ndl-segment-item': !hasOnlyIcons,
        'ndl-segment-icon': hasOnlyIcons,
        'ndl-current': value && value === selected,
    });
    const Component = as;
    return (_jsx(Component, Object.assign({}, restProps, { onClick: () => !isSelected && onChange(value), className: baseClasses, ref: ref, children: children })));
});
SegmentedControlItem.displayName = 'SegmentedControl.Item';
// Issue with TypeScript forwardRef and subcomponents: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34757#issuecomment-894053907
const SegmentedControl = Object.assign(SegmentedControlComponent, {
    Item: SegmentedControlItem,
});
export { SegmentedControl };
//# sourceMappingURL=SegmentedControl.js.map