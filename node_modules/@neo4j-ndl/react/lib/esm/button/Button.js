var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React from 'react';
import { classNames } from '../_common/defaultImports';
import { LoadingSpinner } from '../loading-spinner';
import { removeNewlines, removeSpaces } from '../_common/utils';
export const Button = React.forwardRef(function Button(_a, ref) {
    var { children, as, type = 'button', loading = false, color = 'primary', disabled = false, fill = 'filled', size = 'medium', className, onClick, floating = false, tabIndex = 0 } = _a, restProps = __rest(_a, ["children", "as", "type", "loading", "color", "disabled", "fill", "size", "className", "onClick", "floating", "tabIndex"]);
    let Component = as || 'button';
    if (!as && restProps.href) {
        Component = 'a';
    }
    const interactable = !disabled && !loading;
    const classes = classNames('ndl-btn', {
        'ndl-small': size === 'small',
        'ndl-medium': size === 'medium',
        'ndl-large': size === 'large',
        'ndl-filled': fill === 'filled',
        'ndl-outlined': fill === 'outlined',
        'ndl-text': fill === 'text',
        'ndl-disabled': disabled,
        'ndl-loading': loading,
        'ndl-floating-btn': floating,
        /** Now check button is outlined or filled */
        /**
         * Notice:
         * "Hover" here does not exist for "warning" and "success"
         * and is custom for Neutral
         */
        [`
      ${color === 'neutral'
            ? `n-bg-palette-${color}-bg-strongest`
            : `n-bg-palette-${color}-bg-strong`}
      ${interactable &&
            `hover:n-bg-palette-${color}-hover-strong
         active:n-bg-palette-${color}-pressed-strong`}
      `]: fill === 'filled',
        [`
      n-text-palette-${color}-text
      ${interactable &&
            `hover:n-bg-palette-${color}-hover-weak
        active:n-bg-palette-${color}-pressed-weak`}
      n-border-palette-${color}-bg-strong
      `]: fill === 'outlined' && color !== 'neutral',
        /**
         * Neutral needs overriding as it doesn't follow
         * the same principles with colored variations
         */
        [`
    n-text-palette-neutral-text-weak
      n-bg-palette-${color}-weak
      ${interactable && `hover:n-bg-palette-${color}-bg-default`}
      n-border-palette-neutral-border-strong
      active:n-bg-palette-neutral-pressed
      `]: fill === 'outlined' && color === 'neutral',
        [`
      n-text-palette-${color}-text
      ${interactable &&
            `hover:n-bg-palette-${color}-hover-weak
         active:n-bg-palette-${color}-pressed-weak
      `}
      `]: fill === 'text' && color !== 'neutral',
        [`	
     n-text-palette-neutral-text-weak
      ${interactable && `hover:n-bg-palette-neutral-bg-default`}
      `]: fill === 'text' && color == 'neutral',
    });
    const sanitisedClasses = removeSpaces(removeNewlines(classes));
    const handleClick = (e) => {
        if (!interactable) {
            // By default, a <button /> element with disabled set to true will not get its
            // on click handler called. To support the same behavior on <a /> tags we
            // swallow the event here when disabled, since the <a /> tag with disabled set to
            // true will have its onClick handler called
            e.preventDefault();
            e.stopPropagation();
            return;
        }
        if (onClick) {
            onClick(e);
        }
    };
    return (_jsxs(Component
    /** First props and then className to avoid overriding in classNames */
    , Object.assign({}, restProps, (Component === 'button' ? { type } : {}), { onClick: handleClick, disabled: !interactable, className: [sanitisedClasses, className].join(' '), ref: ref, tabIndex: !interactable ? -1 : tabIndex, children: [loading ? (_jsx(LoadingSpinner, { className: "n-my-auto n-mr-1", size: "small" })) : null, children] })));
});
//# sourceMappingURL=Button.js.map