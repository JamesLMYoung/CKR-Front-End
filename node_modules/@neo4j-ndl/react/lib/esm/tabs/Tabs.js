var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { useContext } from 'react';
import { classNames } from '../_common/defaultImports';
import { forwardRef, } from '../helpers';
const TabsContext = React.createContext(null);
const useTabsContext = () => {
    const context = useContext(TabsContext);
    if (context === null) {
        throw new Error('Tab used without context');
    }
    return context;
};
const getTabPanelId = (tabId) => `tabpanel-${tabId}`;
const getGeneralTabClasses = (size, fill) => {
    return {
        'ndl-large': size === 'large',
        'ndl-small': size === 'small',
        'ndl-filled-tab': fill === 'filled',
        'ndl-underline-tab': fill === 'underline',
    };
};
// React.ForwardRefExoticComponent<BaseTabsProps<TabId> & React.RefAttributes<unknown>>
const TabsComponent = forwardRef(function TabsComponent(_a, ref) {
    var { children, size = 'large', fill = 'underline', onChange, value, className, as = 'div' } = _a, restProps = __rest(_a, ["children", "size", "fill", "onChange", "value", "className", "as"]);
    const classes = classNames('ndl-tabs', getGeneralTabClasses(size, fill), className);
    const Component = as;
    return (_jsx(Component, Object.assign({ className: classes, role: "tablist" }, restProps, { ref: ref, children: _jsx(TabsContext.Provider, { value: { value, size, fill, onChange }, children: children }) })));
});
TabsComponent.displayName =
    'Tabs';
const TabsTab = forwardRef(function TabsTab(_a, ref) {
    var { children, tabId, disabled = false, className, as = 'button' } = _a, restProps = __rest(_a, ["children", "tabId", "disabled", "className", "as"]);
    const { size, fill, value, onChange } = useTabsContext();
    const baseClasses = classNames(Object.assign(Object.assign({}, getGeneralTabClasses(size, fill)), { 'ndl-selected': value === tabId, 'ndl-disabled': disabled }));
    const Component = as;
    // Cast onChange since the compiler isn't smart enough to figure out union of function's parameters
    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-3.html#improved-behavior-for-calling-union-types
    // https://stackoverflow.com/questions/55572797/why-does-typescript-expect-never-as-function-argument-when-retrieving-the-func
    const castOnChange = onChange;
    const handleChange = () => !disabled && castOnChange(tabId);
    const classes = classNames('ndl-tab', baseClasses, className);
    return (_jsxs(Component, Object.assign({ className: classes, onClick: handleChange, role: "tab", "aria-controls": value === tabId ? getTabPanelId(tabId) : undefined }, restProps, { ref: ref, children: [children, fill === 'underline' && _jsx("span", { className: "ndl-tab-underline" })] })));
});
TabsTab.displayName = 'Tabs.Tab';
const TabsTabPanel = React.forwardRef(function TabsTabPanel(_a, ref) {
    var { as = 'div', children, value, tabId } = _a, restProps = __rest(_a, ["as", "children", "value", "tabId"]);
    const Component = as;
    return (_jsx(_Fragment, { children: value === tabId && (_jsx(Component, Object.assign({ role: "tabpanel", id: getTabPanelId(tabId) }, restProps, { ref: ref, children: children }))) }));
});
TabsTabPanel.displayName = 'Tabs.TabPanel';
// To work with forwardRef: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34757#issuecomment-894053907
const Tabs = Object.assign(TabsComponent, {
    Tab: TabsTab,
    TabPanel: TabsTabPanel,
});
export { Tabs };
//# sourceMappingURL=Tabs.js.map