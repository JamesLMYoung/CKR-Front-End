var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { useState } from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { base16AteliersulphurpoolLight, coy, duotoneLight, ghcolors, prism, solarizedlight, vs, } from 'react-syntax-highlighter/dist/cjs/styles/prism';
import { CodeBlockWrapper } from '../_common/CodeBlockWrapper';
export const CodeBlock = React.forwardRef(function CodeBlock(_a, ref) {
    var { maxHeight, code, language, showLineNumbers, theme, headerTitle, actions, disabled } = _a, rest = __rest(_a, ["maxHeight", "code", "language", "showLineNumbers", "theme", "headerTitle", "actions", "disabled"]);
    const [shouldShowExpandButton, setShouldShowExpandButton] = useState(maxHeight !== undefined);
    const getTheme = () => {
        switch (theme) {
            case 'vs':
                return vs;
            case 'base16-ateliersulphurpool.light':
                return base16AteliersulphurpoolLight;
            case 'coy':
                return coy;
            case 'duotone-light':
                return duotoneLight;
            case 'ghcolors':
                return ghcolors;
            case 'prism':
                return prism;
            case 'solarizedlight':
                return solarizedlight;
            default:
                return base16AteliersulphurpoolLight;
        }
    };
    return (_jsx(CodeBlockWrapper, { ref: ref, maxHeight: maxHeight, code: code, headerTitle: headerTitle, disabled: disabled, actions: actions, shouldShowExpandButton: shouldShowExpandButton, setShouldShowExpandButton: setShouldShowExpandButton, children: _jsx(SyntaxHighlighter, { language: language, style: Object.assign(Object.assign({}, getTheme()), { 'pre[class*="language-"]': {
                    color: 'rgb(var(--theme-palette-neutral-text-default))',
                    lineHeight: '1',
                    width: '100%',
                    border: 0,
                    padding: `0 calc(0.75em + ${headerTitle === undefined || headerTitle === ''
                        ? ((actions === null || actions === void 0 ? void 0 : actions.length) || (shouldShowExpandButton ? 1 : 0)) * 36
                        : (shouldShowExpandButton ? 1 : 0) * 36}px) 0.75em 0.75em`,
                    overflowX: 'auto',
                    overflowY: 'auto',
                } }), 
            // Turn on 'showLineNumbers' & 'wrapLongLines' at the same time, the display is wrong
            // https://github.com/react-syntax-highlighter/react-syntax-highlighter/issues/402
            // wrapLongLines
            codeTagProps: { className: 'n-code' }, showLineNumbers: showLineNumbers, children: code }) }));
});
//# sourceMappingURL=CodeBlock.js.map