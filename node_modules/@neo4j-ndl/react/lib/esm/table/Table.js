var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { classNames } from '../_common/defaultImports';
import { forwardRef } from '../helpers';
import { useMemo } from 'react';
import { TableContext, } from './TableContext';
import { Body, BodyCell, Header, ColumnControls, ResizingBar, BodyRow, HeaderCell, Navigation, TableResults, RowsPerPage, Pagination, PaginationNumericButtons, PaginationArrowButton, PaginationNumericButton, LoadingPlaceholder, NoDataPlaceholder, SortingButton, Scrollable, } from './Components';
/**
 *
 * Helping functions
 *
 */
export const TableComponents = {
    ResizingBar: ResizingBar,
    Header: Header,
    Body: Body,
    BodyCell: BodyCell,
    BodyRow: BodyRow,
    HeaderCell: HeaderCell,
    ColumnControls: ColumnControls,
    Navigation: Navigation,
    TableResults: TableResults,
    RowsPerPage: RowsPerPage,
    Pagination: Pagination,
    PaginationNumericButtons: PaginationNumericButtons,
    PaginationNumericButton: PaginationNumericButton,
    PaginationArrowButton: PaginationArrowButton,
    LoadingPlaceholder: LoadingPlaceholder,
    NoDataPlaceholder: NoDataPlaceholder,
    SortingButton: SortingButton,
    Scrollable,
};
/**
 * @deprecated Use DataGrid component instead
 * Will be removed in Needle v3.0
 */
const Table = forwardRef(function Table(_a, ref) {
    var { className = '', style = {}, resizable = true, loading = false, focusableCells = false, tableProps, components } = _a, restProps = __rest(_a, ["className", "style", "resizable", "loading", "focusableCells", "tableProps", "components"]);
    const Components = useMemo(() => (Object.assign(Object.assign({}, TableComponents), components)), [components]);
    const ScrollableContainer = (Components === null || Components === void 0 ? void 0 : Components.Scrollable)
        ? Components.Scrollable
        : Scrollable;
    return (_jsx(TableContext.Provider, { value: {
            resizable,
            tableProps,
            loading,
            components: Components,
        }, children: _jsxs("div", Object.assign({}, restProps, { className: classNames('ndl-table-root', className, {
                'ndl-table-focusable-cells': focusableCells,
            }), style: style, ref: ref, children: [_jsx(ScrollableContainer, { children: _jsxs("div", { className: "ndl-div-table", role: "table", "aria-busy": loading ? 'true' : 'false', children: [(Components === null || Components === void 0 ? void 0 : Components.Header) && _jsx(Components.Header, {}), (Components === null || Components === void 0 ? void 0 : Components.Body) && _jsx(Components.Body, {})] }) }), (Components === null || Components === void 0 ? void 0 : Components.Navigation) && _jsx(Components.Navigation, {})] })) }));
});
/**
 * Easy Actions wrapper for each row
 */
const RowActions = (_a) => {
    var { className } = _a, restProps = __rest(_a, ["className"]);
    return (_jsx("div", Object.assign({}, restProps, { className: classNames('ndl-table-row-actions', className) })));
};
// To work with forwardRef: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34757#issuecomment-894053907
/**
 * @deprecated Use DataGrid component instead
 * Will be removed in Needle v3.0
 */
const TableNameSpace = Object.assign(Table, { RowActions });
export default TableNameSpace;
//# sourceMappingURL=Table.js.map