import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { classNames } from '../_common/defaultImports';
import { forwardRef } from '../helpers';
import { useImperativeHandle, useMemo } from 'react';
import { DataGridContext, } from './DataGridContext';
import { Body, BodyCell, Header, ColumnControls, ResizingBar, BodyRow, HeaderCell, Navigation, TableResults, RowsPerPage, Pagination, PaginationNumericButtons, PaginationArrowButton, PaginationNumericButton, LoadingPlaceholder, NoDataPlaceholder, Scrollable, ActionButton, } from './Components';
import { useTableNav } from '@table-nav/react';
export const DataGridComponents = {
    ResizingBar: ResizingBar,
    Header: Header,
    Body: Body,
    BodyCell: BodyCell,
    BodyRow: BodyRow,
    HeaderCell: HeaderCell,
    ActionButton: ActionButton,
    ColumnControls: ColumnControls,
    Navigation: Navigation,
    TableResults: TableResults,
    RowsPerPage: RowsPerPage,
    Pagination: Pagination,
    PaginationNumericButtons: PaginationNumericButtons,
    PaginationNumericButton: PaginationNumericButton,
    PaginationArrowButton: PaginationArrowButton,
    LoadingPlaceholder: LoadingPlaceholder,
    NoDataPlaceholder: NoDataPlaceholder,
    Scrollable: Scrollable,
};
var BorderStyleEnum;
(function (BorderStyleEnum) {
    BorderStyleEnum["AllSides"] = "all-sides";
    BorderStyleEnum["Horizontal"] = "horizontal";
    BorderStyleEnum["None"] = "none";
})(BorderStyleEnum || (BorderStyleEnum = {}));
var HeaderStyleEnum;
(function (HeaderStyleEnum) {
    HeaderStyleEnum["Filled"] = "filled";
    HeaderStyleEnum["Clean"] = "clean";
})(HeaderStyleEnum || (HeaderStyleEnum = {}));
const DEFAULT_STYLING = {
    zebraStriping: false,
    borderStyle: BorderStyleEnum.Horizontal,
    headerStyle: HeaderStyleEnum.Filled,
};
const DataGrid = forwardRef(function DataGrid({ isResizable = true, isLoading = false, isKeyboardNavigable = false, isAutoResizingColumns = true, tableInstance, components, rootProps, styling = {}, tableNavRef, }, ref) {
    const { className = '', style = {} } = rootProps || {};
    const Styling = useMemo(() => (Object.assign(Object.assign({}, DEFAULT_STYLING), styling)), [styling]);
    const Components = useMemo(() => (Object.assign(Object.assign({}, DataGridComponents), components)), [components]);
    const ScrollableContainer = (Components === null || Components === void 0 ? void 0 : Components.Scrollable)
        ? Components.Scrollable
        : Scrollable;
    const { listeners, tableNav: tableNavigationReference } = useTableNav({
        debug: false,
    });
    /** Surface the tableNav instance for programmatic control if needed */
    useImperativeHandle(tableNavRef, () => tableNavigationReference, [
        tableNavigationReference,
    ]);
    return (_jsx(DataGridContext.Provider, { value: {
            resizable: isResizable,
            tableProps: tableInstance,
            loading: isLoading,
            components: Components,
            resizeColumns: isAutoResizingColumns,
        }, children: _jsxs("div", Object.assign({}, rootProps, (isKeyboardNavigable ? listeners : {}), { className: classNames('ndl-data-grid-root', className, {
                'ndl-data-grid-focusable-cells': isKeyboardNavigable,
                'ndl-data-grid-zebra-striping': Styling.zebraStriping,
                'ndl-data-grid-border-all-sides': Styling.borderStyle === BorderStyleEnum.AllSides,
                'ndl-data-grid-border-horizontal': Styling.borderStyle === BorderStyleEnum.Horizontal,
                'ndl-data-grid-header-filled': Styling.headerStyle === HeaderStyleEnum.Filled,
            }), style: style, ref: ref, children: [_jsx(ScrollableContainer, { children: _jsxs("div", { className: "ndl-div-table", role: "grid", "aria-busy": isLoading ? 'true' : 'false', children: [(Components === null || Components === void 0 ? void 0 : Components.Header) && _jsx(Components.Header, {}), (Components === null || Components === void 0 ? void 0 : Components.Body) && _jsx(Components.Body, {})] }) }), (Components === null || Components === void 0 ? void 0 : Components.Navigation) && _jsx(Components.Navigation, {})] })) }));
});
export default DataGrid;
//# sourceMappingURL=DataGrid.js.map