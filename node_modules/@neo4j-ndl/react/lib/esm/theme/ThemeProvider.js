var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { createContext, useContext, useMemo, } from 'react';
import { classNames } from '../_common/defaultImports';
export const ThemeContext = createContext(undefined);
/**
 * Hook to access the current theme effortlessly
 */
export const useNeedleTheme = () => {
    let theme = useContext(ThemeContext);
    /**
     * If the theme is undefined, we are not
     * inside a `NeedleThemeProvider` .
     * Defaults to `light` theme.
     */
    if (theme === undefined)
        theme = 'light';
    return {
        theme,
        themeClassName: `ndl-theme-${theme}`,
    };
};
export const NeedleThemeProvider = ({ theme = 'light', children, wrapperProps, }) => {
    const clonedChildren = useMemo(() => {
        const _a = wrapperProps || {}, { isWrappingChildren, className } = _a, restWrapperProps = __rest(_a, ["isWrappingChildren", "className"]);
        const props = Object.assign(Object.assign({}, restWrapperProps), { className: classNames(className, `ndl-theme-${theme}`) });
        if (isWrappingChildren !== true) {
            return React.Children.map(children, (child) => {
                return React.cloneElement(child, Object.assign(Object.assign({}, props), { className: classNames(child.props.className, props.className) }));
            });
        }
        else {
            return (_jsx("span", Object.assign({}, props, { className: classNames('ndl-theme-wrapper', props.className), children: children })));
        }
    }, [wrapperProps, theme, children]);
    return (_jsx(ThemeContext.Provider, { value: theme, children: clonedChildren }));
};
//# sourceMappingURL=ThemeProvider.js.map