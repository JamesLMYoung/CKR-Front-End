var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { classNames } from '../_common/defaultImports';
import React, { useEffect } from 'react';
import { CheckCircleIconSolid, ExclamationCircleIconSolid, ExclamationTriangleIconSolid, InformationCircleIconSolid, XMarkIconOutline, } from '../icons';
import { needleWarningMessage } from '../_common/utils';
/**
 *
 *
 * Helpers
 *
 *
 */
const getStatusIcon = (iconType) => {
    let iconComponent;
    switch (iconType) {
        case 'success':
            iconComponent = _jsx(CheckCircleIconSolid, {});
            break;
        case 'warning':
            iconComponent = _jsx(ExclamationTriangleIconSolid, {});
            break;
        case 'danger':
            iconComponent = _jsx(ExclamationCircleIconSolid, {});
            break;
        default:
            iconComponent = _jsx(InformationCircleIconSolid, {});
    }
    return (_jsx("div", { className: "ndl-banner-icon ndl-banner-status-icon", children: iconComponent }));
};
const BannerActions = (_a) => {
    var { label } = _a, restProps = __rest(_a, ["label"]);
    return _jsx("a", Object.assign({}, restProps, { children: label }));
};
const Banner = React.forwardRef(function Banner(_a, ref) {
    var { type = 'info', icon = false, title, name, actions = [], floating = false, description = null, onClose, className = '', children = null, closeable = false } = _a, rest = __rest(_a, ["type", "icon", "title", "name", "actions", "floating", "description", "onClose", "className", "children", "closeable"]);
    useEffect(() => {
        if (typeof title !== 'string' && !name && closeable) {
            needleWarningMessage('Banner Component expected `name` prop when title is not a string: https://dequeuniversity.com/rules/axe/4.2/aria-dialog-name?application=axeAPI');
        }
    }, [title, name, closeable]);
    if (typeof title === 'string' && !name) {
        name = title;
    }
    const classes = classNames('ndl-banner', {
        'ndl-with-description': description,
        'ndl-neutral': type === 'neutral',
        'ndl-info': type === 'info',
        'ndl-success': type === 'success',
        'ndl-warning': type === 'warning',
        'ndl-danger': type === 'danger',
        'ndl-floating': floating,
        [className]: className && className !== '',
    });
    const handleClose = (e) => {
        if (onClose && typeof onClose === 'function') {
            onClose(e);
        }
    };
    const hasIcon = icon && type !== 'neutral';
    return (_jsxs("div", Object.assign({ className: classes, role: closeable ? 'alertdialog' : 'alert' }, rest, { title: name, ref: ref, children: [hasIcon && getStatusIcon(type), _jsxs("div", { className: "ndl-banner-content", children: [title && _jsx("h6", { className: "ndl-banner-title", children: title }), (description || children) && (_jsx("div", { className: "ndl-banner-description", children: children || description })), actions && actions.length > 0 && (_jsx("div", { className: "ndl-banner-actions", children: actions.map((action, index) => (_jsx(BannerActions, Object.assign({}, action), index))) }))] }), closeable && (_jsx("div", { tabIndex: 0, role: "button", className: "ndl-banner-icon ndl-close-icon", onKeyDown: handleClose, onClick: handleClose, "aria-label": "close-banner", children: _jsx(XMarkIconOutline, {}) }))] })));
});
// Issue with TypeScript forwardRef and subcomponents: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34757#issuecomment-894053907
const BannerNamespace = Object.assign(Banner, { Actions: BannerActions });
BannerNamespace.displayName = 'Banner';
export { BannerNamespace as Banner };
//# sourceMappingURL=Banner.js.map