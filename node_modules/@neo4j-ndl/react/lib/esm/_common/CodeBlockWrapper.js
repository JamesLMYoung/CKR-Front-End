import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { useEffect, useLayoutEffect, useRef, useState } from 'react';
import { classNames } from './defaultImports';
import { IconButton } from '../button';
import { ChevronDownIconOutline, ChevronUpIconOutline } from '../icons';
export const CodeBlockWrapper = React.forwardRef(function CodeBlockWrapper({ as, maxHeight, code, headerTitle, children, disabled, actions, shouldShowExpandButton, setShouldShowExpandButton, }, ref) {
    const Component = as || 'div';
    const syntaxHighlighterWrapperRef = useRef(null);
    const [containerHeight, setContainerHeight] = useState(`${maxHeight}px`);
    const [isExpanded, setIsExpanded] = useState(maxHeight === undefined);
    useEffect(() => {
        var _a, _b;
        if ((((_a = syntaxHighlighterWrapperRef.current) === null || _a === void 0 ? void 0 : _a.scrollHeight) || 0) <=
            (((_b = syntaxHighlighterWrapperRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight) || 0)) {
            setIsExpanded(true);
        }
        else {
            setIsExpanded(false);
        }
    }, []);
    useLayoutEffect(() => {
        var _a, _b;
        if ((((_a = syntaxHighlighterWrapperRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) || 0) >=
            (((_b = syntaxHighlighterWrapperRef.current) === null || _b === void 0 ? void 0 : _b.scrollHeight) || 0)) {
            setContainerHeight(`fit-content`);
            setShouldShowExpandButton(false);
        }
        else {
            setContainerHeight(`${maxHeight}px`);
            setShouldShowExpandButton(true);
        }
    }, [maxHeight, code, setShouldShowExpandButton]);
    return (_jsxs(Component, { ref: ref, className: "ndl-code-block-container", style: { height: containerHeight }, children: [_jsxs("div", { className: "n-flex n-flex-col n-h-full", children: [headerTitle && (_jsx("div", { className: classNames('ndl-code-block-title', {
                            'ndl-disabled': disabled,
                        }), style: {
                            maxWidth: `calc(100% - ${((actions === null || actions === void 0 ? void 0 : actions.length) || 0) * 36 + 20}px)`,
                        }, "data-testid": "ndl-code-block-title", children: headerTitle })), _jsxs("div", { className: classNames('ndl-code-content-container', {
                            'ndl-disabled': disabled,
                        }), style: {
                            height: headerTitle ? 'calc(100% - 24px - 12px)' : '100%',
                        }, children: [_jsx("div", { className: "ndl-code-pseudo-element" }), _jsx("div", { ref: syntaxHighlighterWrapperRef, className: "ndl-highlight-wrapper", role: "textbox", "aria-label": "code-snippet", tabIndex: 0, children: children }), _jsx("div", { className: "ndl-code-pseudo-element" })] })] }), _jsx("div", { className: classNames('ndl-code-block-actions', {
                    'ndl-disabled': disabled,
                }), children: actions === null || actions === void 0 ? void 0 : actions.map((iconButtonProps, i) => (_jsx(IconButton, Object.assign({ "data-testid": `ndl-action-button-${i}`, clean: true, "aria-label": `${iconButtonProps['aria-label'] || 'CodeBlock Action'}`, disabled: disabled }, iconButtonProps), i))) }), shouldShowExpandButton && (_jsx("div", { className: "ndl-code-block-expand-button", children: _jsx(IconButton, { "aria-label": "Expand/Collapse", onClick: () => {
                        if (isExpanded) {
                            setContainerHeight(`${maxHeight}px`);
                            setIsExpanded(false);
                        }
                        else {
                            setContainerHeight(`fit-content`);
                            setIsExpanded(true);
                        }
                    }, clean: true, children: isExpanded ? _jsx(ChevronUpIconOutline, {}) : _jsx(ChevronDownIconOutline, {}) }) }))] }));
});
//# sourceMappingURL=CodeBlockWrapper.js.map