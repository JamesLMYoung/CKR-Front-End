var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import React, { useCallback } from 'react';
import { classNames } from '../_common/defaultImports';
import { XMarkIconOutline } from '../icons';
import { needleWarningMessage } from '../_common/utils';
/**
 *
 *
 * Helpers
 *
 *
 */
/** Add any helper functions here. */
/**
 *
 *
 * Tag Component
 *
 *
 */
export const Tag = React.forwardRef(function Tag(props, ref) {
    const { children, type = 'default', removeable, onRemove } = props, restProps = __rest(props, ["children", "type", "removeable", "onRemove"]);
    if (removeable && typeof onRemove !== 'function') {
        needleWarningMessage('Tag element is removable but onRemove prop is not a function or provided');
    }
    const classes = classNames(`ndl-tag`, props.className, {
        'ndl-default': type === 'default',
        'ndl-destructive': type === 'destructive',
        'ndl-removeable': removeable,
    });
    const keyDownHandler = useCallback((e) => {
        if (e.key === 'Enter') {
            onRemove && onRemove(e);
        }
    }, [onRemove]);
    return (_jsxs("div", Object.assign({}, restProps, { className: classes, ref: ref, children: [children, removeable && (_jsx("button", { type: "button", className: "ndl-remove-icon", onKeyDown: keyDownHandler, onClick: onRemove, "aria-label": "Remove tag", children: _jsx(XMarkIconOutline, {}) }))] })));
});
export default Tag;
//# sourceMappingURL=Tag.js.map