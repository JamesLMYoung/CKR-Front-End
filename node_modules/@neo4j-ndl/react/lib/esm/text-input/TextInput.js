var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 *  Copyright (c) "Neo4j"
 *  Neo4j Sweden AB [http://neo4j.com]
 *
 *  This file is part of Neo4j.
 *
 *  Neo4j is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { forwardRef, useMemo, } from 'react';
import { classNames } from '../_common/defaultImports';
import { ExclamationCircleIconSolid, InformationCircleIconOutline, } from '../icons';
import { Tip } from '../tip';
import { needleWarningMessage } from '../_common/utils';
import { customLabelAndNoAriaLabelWarningMessage } from '../_common/messages';
/**
 *
 *
 * TextInput Component
 *
 *
 */
const TextInput = forwardRef(function TextInput(props, ref) {
    const { label, fluid, errorText, helpText, leftIcon, rightIcon, isOptional = false, informationIconText, type = 'text', size = 'medium', 'aria-label': ariaLabel, tooltipProps } = props, customProps = __rest(props, ["label", "fluid", "errorText", "helpText", "leftIcon", "rightIcon", "isOptional", "informationIconText", "type", "size", 'aria-label', "tooltipProps"]);
    const containerWrappingClasses = classNames(`ndl-form-item ndl-type-text`, customProps.className, {
        'ndl-disabled': customProps.disabled,
        'ndl-small': size === 'small',
        'ndl-medium': size === 'medium',
        'ndl-large': size === 'large',
        'ndl-has-error': errorText,
        'ndl-has-left-icon': leftIcon,
        'ndl-has-right-icon': rightIcon || errorText,
        'ndl-has-icon': leftIcon || rightIcon || errorText,
    });
    const hasEmptyLabelValue = !label || label === '';
    const labelWrappingClasses = classNames('ndl-form-item-label', {
        'ndl-fluid': fluid,
        'ndl-form-item-no-label': hasEmptyLabelValue,
    });
    const isCustomLabel = label && typeof label !== 'string';
    const hasCustomLabelAndNoAriaLabel = isCustomLabel && !ariaLabel;
    useMemo(() => {
        if (!label && !ariaLabel) {
            needleWarningMessage('A TextInput without a label does not have an aria label, be sure to include an aria label for screen readers link: https://dequeuniversity.com/rules/axe/4.2/label?application=axeAPI');
        }
        if (hasCustomLabelAndNoAriaLabel) {
            needleWarningMessage(customLabelAndNoAriaLabelWarningMessage);
        }
    }, [label, ariaLabel, hasCustomLabelAndNoAriaLabel]);
    const customPropsClassNameStripped = Object.assign(Object.assign({}, customProps), { className: undefined });
    const informationIconClasses = classNames({
        'ndl-information-icon-small': size === 'small' || size === 'medium',
        'ndl-information-icon-large': size === 'large',
    });
    return (_jsxs("div", { className: containerWrappingClasses, children: [_jsxs("label", { className: labelWrappingClasses, children: [_jsxs("div", { className: "ndl-input-wrapper", children: [leftIcon && _jsx("div", { className: "ndl-icon ndl-left-icon", children: leftIcon }), _jsx("input", Object.assign({}, customPropsClassNameStripped, { type: type, ref: ref, "aria-label": ariaLabel })), rightIcon && (_jsx("div", { className: "ndl-icon ndl-right-icon", children: rightIcon }))] }), !hasEmptyLabelValue && (_jsxs("div", { className: "ndl-form-item-wrapper", children: [_jsx("span", { className: "ndl-form-label-text", children: label }), informationIconText && (_jsxs(Tip, Object.assign({}, tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.tooltipRoot, { children: [_jsx(Tip.Trigger, Object.assign({}, tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.tooltipTrigger, { children: _jsx("div", { className: informationIconClasses, "data-testid": "ndl-information-icon", children: _jsx(InformationCircleIconOutline, {}) }) })), _jsx(Tip.Content, Object.assign({}, tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.tooltipContent, { children: informationIconText }))] }))), isOptional && (_jsx("span", { className: "ndl-form-item-optional", children: "Optional" }))] }))] }), helpText && !errorText && _jsx("div", { className: "ndl-form-msg", children: helpText }), errorText && (_jsxs("div", { className: "ndl-form-msg", children: [_jsx("div", { className: "ndl-error-icon", children: _jsx(ExclamationCircleIconSolid, {}) }), _jsx("div", { className: "ndl-error-text", children: errorText })] }))] }));
});
export default TextInput;
//# sourceMappingURL=TextInput.js.map